/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// ReccomendGroupChunksRequest
    /// </summary>
    [DataContract(Name = "ReccomendGroupChunksRequest")]
    public partial class ReccomendGroupChunksRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReccomendGroupChunksRequest" /> class.
        /// </summary>
        /// <param name="filters">filters.</param>
        /// <param name="groupSize">The number of chunks to fetch for each group. This is the number of chunks which will be returned in the response for each group. The default is 10..</param>
        /// <param name="limit">The number of groups to return. This is the number of groups which will be returned in the response. The default is 10..</param>
        /// <param name="negativeGroupIds">The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups..</param>
        /// <param name="negativeGroupTrackingIds">The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups..</param>
        /// <param name="positiveGroupIds">The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups..</param>
        /// <param name="positiveGroupTrackingIds">The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups..</param>
        public ReccomendGroupChunksRequest(ChunkFilter filters = default(ChunkFilter), int? groupSize = default(int?), long? limit = default(long?), List<Guid> negativeGroupIds = default(List<Guid>), List<string> negativeGroupTrackingIds = default(List<string>), List<Guid> positiveGroupIds = default(List<Guid>), List<string> positiveGroupTrackingIds = default(List<string>))
        {
            this.Filters = filters;
            this.GroupSize = groupSize;
            this.Limit = limit;
            this.NegativeGroupIds = negativeGroupIds;
            this.NegativeGroupTrackingIds = negativeGroupTrackingIds;
            this.PositiveGroupIds = positiveGroupIds;
            this.PositiveGroupTrackingIds = positiveGroupTrackingIds;
        }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public ChunkFilter Filters { get; set; }

        /// <summary>
        /// The number of chunks to fetch for each group. This is the number of chunks which will be returned in the response for each group. The default is 10.
        /// </summary>
        /// <value>The number of chunks to fetch for each group. This is the number of chunks which will be returned in the response for each group. The default is 10.</value>
        [DataMember(Name = "group_size", EmitDefaultValue = true)]
        public int? GroupSize { get; set; }

        /// <summary>
        /// The number of groups to return. This is the number of groups which will be returned in the response. The default is 10.
        /// </summary>
        /// <value>The number of groups to return. This is the number of groups which will be returned in the response. The default is 10.</value>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public long? Limit { get; set; }

        /// <summary>
        /// The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.
        /// </summary>
        /// <value>The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.</value>
        [DataMember(Name = "negative_group_ids", EmitDefaultValue = true)]
        public List<Guid> NegativeGroupIds { get; set; }

        /// <summary>
        /// The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.
        /// </summary>
        /// <value>The  ids of the groups to be used as negative examples for the recommendation. The groups in this array will be used to filter out similar groups.</value>
        [DataMember(Name = "negative_group_tracking_ids", EmitDefaultValue = true)]
        public List<string> NegativeGroupTrackingIds { get; set; }

        /// <summary>
        /// The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.
        /// </summary>
        /// <value>The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.</value>
        [DataMember(Name = "positive_group_ids", EmitDefaultValue = true)]
        public List<Guid> PositiveGroupIds { get; set; }

        /// <summary>
        /// The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.
        /// </summary>
        /// <value>The  ids of the groups to be used as positive examples for the recommendation. The groups in this array will be used to find similar groups.</value>
        [DataMember(Name = "positive_group_tracking_ids", EmitDefaultValue = true)]
        public List<string> PositiveGroupTrackingIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReccomendGroupChunksRequest {\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  GroupSize: ").Append(GroupSize).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  NegativeGroupIds: ").Append(NegativeGroupIds).Append("\n");
            sb.Append("  NegativeGroupTrackingIds: ").Append(NegativeGroupTrackingIds).Append("\n");
            sb.Append("  PositiveGroupIds: ").Append(PositiveGroupIds).Append("\n");
            sb.Append("  PositiveGroupTrackingIds: ").Append(PositiveGroupTrackingIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GroupSize (int?) minimum
            if (this.GroupSize < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupSize, must be a value greater than or equal to 0.", new [] { "GroupSize" });
            }

            // Limit (long?) minimum
            if (this.Limit < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 0.", new [] { "Limit" });
            }

            yield break;
        }
    }

}
