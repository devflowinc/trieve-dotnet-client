/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// UploadFileData
    /// </summary>
    [DataContract(Name = "UploadFileData")]
    public partial class UploadFileData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFileData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadFileData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFileData" /> class.
        /// </summary>
        /// <param name="base64File">Base64 encoded file. Convert + to -, / to _, and remove the ending &#x3D; if present. This is the standard base64url encoding. (required).</param>
        /// <param name="createChunks">Create chunks is a boolean which determines whether or not to create chunks from the file. If false, you can manually chunk the file and send the chunks to the create_chunk endpoint with the file_id to associate chunks with the file. Meant mostly for advanced users..</param>
        /// <param name="description">Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk..</param>
        /// <param name="fileMimeType">MIME type of the file being uploaded. (required).</param>
        /// <param name="fileName">Name of the file being uploaded, including the extension. (required).</param>
        /// <param name="link">Link to the file. This can also be any string. This can be used to filter when searching for the file&#39;s resulting chunks. The link value will not affect embedding creation..</param>
        /// <param name="metadata">Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file&#39;s chunks..</param>
        /// <param name="tagSet">Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Tags are used to filter chunks when searching. HNSW indices are created for each tag such that there is no performance loss when filtering on them..</param>
        /// <param name="timeStamp">Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file&#39;s chunks..</param>
        public UploadFileData(string base64File = default(string), bool? createChunks = default(bool?), string description = default(string), string fileMimeType = default(string), string fileName = default(string), string link = default(string), Object metadata = default(Object), List<string> tagSet = default(List<string>), string timeStamp = default(string))
        {
            // to ensure "base64File" is required (not null)
            if (base64File == null)
            {
                throw new ArgumentNullException("base64File is a required property for UploadFileData and cannot be null");
            }
            this.Base64File = base64File;
            // to ensure "fileMimeType" is required (not null)
            if (fileMimeType == null)
            {
                throw new ArgumentNullException("fileMimeType is a required property for UploadFileData and cannot be null");
            }
            this.FileMimeType = fileMimeType;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for UploadFileData and cannot be null");
            }
            this.FileName = fileName;
            this.CreateChunks = createChunks;
            this.Description = description;
            this.Link = link;
            this.Metadata = metadata;
            this.TagSet = tagSet;
            this.TimeStamp = timeStamp;
        }

        /// <summary>
        /// Base64 encoded file. Convert + to -, / to _, and remove the ending &#x3D; if present. This is the standard base64url encoding.
        /// </summary>
        /// <value>Base64 encoded file. Convert + to -, / to _, and remove the ending &#x3D; if present. This is the standard base64url encoding.</value>
        [DataMember(Name = "base64_file", IsRequired = true, EmitDefaultValue = true)]
        public string Base64File { get; set; }

        /// <summary>
        /// Create chunks is a boolean which determines whether or not to create chunks from the file. If false, you can manually chunk the file and send the chunks to the create_chunk endpoint with the file_id to associate chunks with the file. Meant mostly for advanced users.
        /// </summary>
        /// <value>Create chunks is a boolean which determines whether or not to create chunks from the file. If false, you can manually chunk the file and send the chunks to the create_chunk endpoint with the file_id to associate chunks with the file. Meant mostly for advanced users.</value>
        [DataMember(Name = "create_chunks", EmitDefaultValue = true)]
        public bool? CreateChunks { get; set; }

        /// <summary>
        /// Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk.
        /// </summary>
        /// <value>Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// MIME type of the file being uploaded.
        /// </summary>
        /// <value>MIME type of the file being uploaded.</value>
        [DataMember(Name = "file_mime_type", IsRequired = true, EmitDefaultValue = true)]
        public string FileMimeType { get; set; }

        /// <summary>
        /// Name of the file being uploaded, including the extension.
        /// </summary>
        /// <value>Name of the file being uploaded, including the extension.</value>
        [DataMember(Name = "file_name", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Link to the file. This can also be any string. This can be used to filter when searching for the file&#39;s resulting chunks. The link value will not affect embedding creation.
        /// </summary>
        /// <value>Link to the file. This can also be any string. This can be used to filter when searching for the file&#39;s resulting chunks. The link value will not affect embedding creation.</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file&#39;s chunks.
        /// </summary>
        /// <value>Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file&#39;s chunks.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Tags are used to filter chunks when searching. HNSW indices are created for each tag such that there is no performance loss when filtering on them.
        /// </summary>
        /// <value>Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Tags are used to filter chunks when searching. HNSW indices are created for each tag such that there is no performance loss when filtering on them.</value>
        [DataMember(Name = "tag_set", EmitDefaultValue = true)]
        public List<string> TagSet { get; set; }

        /// <summary>
        /// Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file&#39;s chunks.
        /// </summary>
        /// <value>Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file&#39;s chunks.</value>
        [DataMember(Name = "time_stamp", EmitDefaultValue = true)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadFileData {\n");
            sb.Append("  Base64File: ").Append(Base64File).Append("\n");
            sb.Append("  CreateChunks: ").Append(CreateChunks).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileMimeType: ").Append(FileMimeType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TagSet: ").Append(TagSet).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
