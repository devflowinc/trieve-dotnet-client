/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// SlimUser
    /// </summary>
    [DataContract(Name = "SlimUser")]
    public partial class SlimUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SlimUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SlimUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SlimUser" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="orgs">orgs (required).</param>
        /// <param name="userOrgs">userOrgs (required).</param>
        /// <param name="username">username.</param>
        /// <param name="visibleEmail">visibleEmail (required).</param>
        /// <param name="website">website.</param>
        public SlimUser(string email = default(string), Guid id = default(Guid), string name = default(string), List<Organization> orgs = default(List<Organization>), List<UserOrganization> userOrgs = default(List<UserOrganization>), string username = default(string), bool visibleEmail = default(bool), string website = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for SlimUser and cannot be null");
            }
            this.Email = email;
            this.Id = id;
            // to ensure "orgs" is required (not null)
            if (orgs == null)
            {
                throw new ArgumentNullException("orgs is a required property for SlimUser and cannot be null");
            }
            this.Orgs = orgs;
            // to ensure "userOrgs" is required (not null)
            if (userOrgs == null)
            {
                throw new ArgumentNullException("userOrgs is a required property for SlimUser and cannot be null");
            }
            this.UserOrgs = userOrgs;
            this.VisibleEmail = visibleEmail;
            this.Name = name;
            this.Username = username;
            this.Website = website;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Orgs
        /// </summary>
        [DataMember(Name = "orgs", IsRequired = true, EmitDefaultValue = true)]
        public List<Organization> Orgs { get; set; }

        /// <summary>
        /// Gets or Sets UserOrgs
        /// </summary>
        [DataMember(Name = "user_orgs", IsRequired = true, EmitDefaultValue = true)]
        public List<UserOrganization> UserOrgs { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets VisibleEmail
        /// </summary>
        [DataMember(Name = "visible_email", IsRequired = true, EmitDefaultValue = true)]
        public bool VisibleEmail { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SlimUser {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Orgs: ").Append(Orgs).Append("\n");
            sb.Append("  UserOrgs: ").Append(UserOrgs).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VisibleEmail: ").Append(VisibleEmail).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
