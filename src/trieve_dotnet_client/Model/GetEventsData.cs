/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// GetEventsData
    /// </summary>
    [DataContract(Name = "GetEventsData")]
    public partial class GetEventsData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventsData" /> class.
        /// </summary>
        /// <param name="eventTypes">The types of events to get. Any combination of file_uploaded, card_uploaded, card_action_failed, or card_updated. Leave undefined to get all events..</param>
        /// <param name="page">The page number to get. Default is 1..</param>
        /// <param name="pageSize">The number of items per page. Default is 10..</param>
        public GetEventsData(List<string> eventTypes = default(List<string>), long? page = default(long?), long? pageSize = default(long?))
        {
            this.EventTypes = eventTypes;
            this.Page = page;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// The types of events to get. Any combination of file_uploaded, card_uploaded, card_action_failed, or card_updated. Leave undefined to get all events.
        /// </summary>
        /// <value>The types of events to get. Any combination of file_uploaded, card_uploaded, card_action_failed, or card_updated. Leave undefined to get all events.</value>
        [DataMember(Name = "event_types", EmitDefaultValue = true)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// The page number to get. Default is 1.
        /// </summary>
        /// <value>The page number to get. Default is 1.</value>
        [DataMember(Name = "page", EmitDefaultValue = true)]
        public long? Page { get; set; }

        /// <summary>
        /// The number of items per page. Default is 10.
        /// </summary>
        /// <value>The number of items per page. Default is 10.</value>
        [DataMember(Name = "page_size", EmitDefaultValue = true)]
        public long? PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEventsData {\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
