/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// OrganizationUsageCount
    /// </summary>
    [DataContract(Name = "OrganizationUsageCount")]
    public partial class OrganizationUsageCount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUsageCount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrganizationUsageCount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUsageCount" /> class.
        /// </summary>
        /// <param name="datasetCount">datasetCount (required).</param>
        /// <param name="fileStorage">fileStorage (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="messageCount">messageCount (required).</param>
        /// <param name="orgId">orgId (required).</param>
        /// <param name="userCount">userCount (required).</param>
        public OrganizationUsageCount(int datasetCount = default(int), long fileStorage = default(long), Guid id = default(Guid), int messageCount = default(int), Guid orgId = default(Guid), int userCount = default(int))
        {
            this.DatasetCount = datasetCount;
            this.FileStorage = fileStorage;
            this.Id = id;
            this.MessageCount = messageCount;
            this.OrgId = orgId;
            this.UserCount = userCount;
        }

        /// <summary>
        /// Gets or Sets DatasetCount
        /// </summary>
        [DataMember(Name = "dataset_count", IsRequired = true, EmitDefaultValue = true)]
        public int DatasetCount { get; set; }

        /// <summary>
        /// Gets or Sets FileStorage
        /// </summary>
        [DataMember(Name = "file_storage", IsRequired = true, EmitDefaultValue = true)]
        public long FileStorage { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets MessageCount
        /// </summary>
        [DataMember(Name = "message_count", IsRequired = true, EmitDefaultValue = true)]
        public int MessageCount { get; set; }

        /// <summary>
        /// Gets or Sets OrgId
        /// </summary>
        [DataMember(Name = "org_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OrgId { get; set; }

        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name = "user_count", IsRequired = true, EmitDefaultValue = true)]
        public int UserCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationUsageCount {\n");
            sb.Append("  DatasetCount: ").Append(DatasetCount).Append("\n");
            sb.Append("  FileStorage: ").Append(FileStorage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  OrgId: ").Append(OrgId).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
