/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// ChunkData
    /// </summary>
    [DataContract(Name = "ChunkData")]
    public partial class ChunkData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkData" /> class.
        /// </summary>
        /// <param name="chunkHtml">HTML content of the chunk. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content..</param>
        /// <param name="chunkVector">Chunk_vector is a vector of floats which can be used instead of generating a new embedding. This is useful for when you are using a pre-embedded dataset. If this is not provided, the innerText of the chunk_html will be used to create the embedding..</param>
        /// <param name="fileId">File_uuid is the uuid of the file that the chunk is associated with. This is used to associate chunks with files. This is useful for when you want to delete a file and all of its associated chunks..</param>
        /// <param name="groupIds">Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response..</param>
        /// <param name="groupTrackingIds">Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response..</param>
        /// <param name="link">Link to the chunk. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation..</param>
        /// <param name="metadata">Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata..</param>
        /// <param name="splitAvg">Split avg is a boolean which tells the server to split the text in the chunk_html into smaller chunks and average their resulting vectors. This is useful for when you want to create a chunk from a large piece of text and want to split it into smaller chunks to create a more fuzzy average dense vector. The sparse vector will be generated normally with no averaging. By default this is false..</param>
        /// <param name="tagSet">Tag set is a list of tags. This can be used to filter chunks by tag. Unlike with metadata filtering, HNSW indices will exist for each tag such that there is not a performance hit for filtering on them..</param>
        /// <param name="timeStamp">Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results..</param>
        /// <param name="trackingId">Tracking_id is a string which can be used to identify a chunk. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk..</param>
        /// <param name="upsertByTrackingId">Upsert when a chunk with the same tracking_id exists. By default this is false, and the request will fail if a chunk with the same tracking_id exists. If this is true, the chunk will be updated if a chunk with the same tracking_id exists..</param>
        /// <param name="weight">Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset..</param>
        public ChunkData(string chunkHtml = default(string), List<float> chunkVector = default(List<float>), Guid? fileId = default(Guid?), List<Guid> groupIds = default(List<Guid>), List<string> groupTrackingIds = default(List<string>), string link = default(string), Object metadata = default(Object), bool? splitAvg = default(bool?), List<string> tagSet = default(List<string>), string timeStamp = default(string), string trackingId = default(string), bool? upsertByTrackingId = default(bool?), double? weight = default(double?))
        {
            this.ChunkHtml = chunkHtml;
            this.ChunkVector = chunkVector;
            this.FileId = fileId;
            this.GroupIds = groupIds;
            this.GroupTrackingIds = groupTrackingIds;
            this.Link = link;
            this.Metadata = metadata;
            this.SplitAvg = splitAvg;
            this.TagSet = tagSet;
            this.TimeStamp = timeStamp;
            this.TrackingId = trackingId;
            this.UpsertByTrackingId = upsertByTrackingId;
            this.Weight = weight;
        }

        /// <summary>
        /// HTML content of the chunk. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content.
        /// </summary>
        /// <value>HTML content of the chunk. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content.</value>
        [DataMember(Name = "chunk_html", EmitDefaultValue = true)]
        public string ChunkHtml { get; set; }

        /// <summary>
        /// Chunk_vector is a vector of floats which can be used instead of generating a new embedding. This is useful for when you are using a pre-embedded dataset. If this is not provided, the innerText of the chunk_html will be used to create the embedding.
        /// </summary>
        /// <value>Chunk_vector is a vector of floats which can be used instead of generating a new embedding. This is useful for when you are using a pre-embedded dataset. If this is not provided, the innerText of the chunk_html will be used to create the embedding.</value>
        [DataMember(Name = "chunk_vector", EmitDefaultValue = true)]
        public List<float> ChunkVector { get; set; }

        /// <summary>
        /// File_uuid is the uuid of the file that the chunk is associated with. This is used to associate chunks with files. This is useful for when you want to delete a file and all of its associated chunks.
        /// </summary>
        /// <value>File_uuid is the uuid of the file that the chunk is associated with. This is used to associate chunks with files. This is useful for when you want to delete a file and all of its associated chunks.</value>
        [DataMember(Name = "file_id", EmitDefaultValue = true)]
        public Guid? FileId { get; set; }

        /// <summary>
        /// Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.
        /// </summary>
        /// <value>Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.</value>
        [DataMember(Name = "group_ids", EmitDefaultValue = true)]
        public List<Guid> GroupIds { get; set; }

        /// <summary>
        /// Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.
        /// </summary>
        /// <value>Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to create a chunk and add it to a group or multiple groups in one request. Necessary because this route queues the chunk for ingestion and the chunk may not exist yet immediately after response.</value>
        [DataMember(Name = "group_tracking_ids", EmitDefaultValue = true)]
        public List<string> GroupTrackingIds { get; set; }

        /// <summary>
        /// Link to the chunk. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation.
        /// </summary>
        /// <value>Link to the chunk. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation.</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.
        /// </summary>
        /// <value>Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Split avg is a boolean which tells the server to split the text in the chunk_html into smaller chunks and average their resulting vectors. This is useful for when you want to create a chunk from a large piece of text and want to split it into smaller chunks to create a more fuzzy average dense vector. The sparse vector will be generated normally with no averaging. By default this is false.
        /// </summary>
        /// <value>Split avg is a boolean which tells the server to split the text in the chunk_html into smaller chunks and average their resulting vectors. This is useful for when you want to create a chunk from a large piece of text and want to split it into smaller chunks to create a more fuzzy average dense vector. The sparse vector will be generated normally with no averaging. By default this is false.</value>
        [DataMember(Name = "split_avg", EmitDefaultValue = true)]
        public bool? SplitAvg { get; set; }

        /// <summary>
        /// Tag set is a list of tags. This can be used to filter chunks by tag. Unlike with metadata filtering, HNSW indices will exist for each tag such that there is not a performance hit for filtering on them.
        /// </summary>
        /// <value>Tag set is a list of tags. This can be used to filter chunks by tag. Unlike with metadata filtering, HNSW indices will exist for each tag such that there is not a performance hit for filtering on them.</value>
        [DataMember(Name = "tag_set", EmitDefaultValue = true)]
        public List<string> TagSet { get; set; }

        /// <summary>
        /// Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results.
        /// </summary>
        /// <value>Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results.</value>
        [DataMember(Name = "time_stamp", EmitDefaultValue = true)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// Tracking_id is a string which can be used to identify a chunk. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.
        /// </summary>
        /// <value>Tracking_id is a string which can be used to identify a chunk. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Upsert when a chunk with the same tracking_id exists. By default this is false, and the request will fail if a chunk with the same tracking_id exists. If this is true, the chunk will be updated if a chunk with the same tracking_id exists.
        /// </summary>
        /// <value>Upsert when a chunk with the same tracking_id exists. By default this is false, and the request will fail if a chunk with the same tracking_id exists. If this is true, the chunk will be updated if a chunk with the same tracking_id exists.</value>
        [DataMember(Name = "upsert_by_tracking_id", EmitDefaultValue = true)]
        public bool? UpsertByTrackingId { get; set; }

        /// <summary>
        /// Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset.
        /// </summary>
        /// <value>Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset.</value>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public double? Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChunkData {\n");
            sb.Append("  ChunkHtml: ").Append(ChunkHtml).Append("\n");
            sb.Append("  ChunkVector: ").Append(ChunkVector).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  GroupTrackingIds: ").Append(GroupTrackingIds).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SplitAvg: ").Append(SplitAvg).Append("\n");
            sb.Append("  TagSet: ").Append(TagSet).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  UpsertByTrackingId: ").Append(UpsertByTrackingId).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
