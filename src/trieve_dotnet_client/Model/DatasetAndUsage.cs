/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// DatasetAndUsage
    /// </summary>
    [DataContract(Name = "DatasetAndUsage")]
    public partial class DatasetAndUsage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetAndUsage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DatasetAndUsage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetAndUsage" /> class.
        /// </summary>
        /// <param name="dataset">dataset (required).</param>
        /// <param name="datasetUsage">datasetUsage (required).</param>
        public DatasetAndUsage(DatasetDTO dataset = default(DatasetDTO), DatasetUsageCount datasetUsage = default(DatasetUsageCount))
        {
            // to ensure "dataset" is required (not null)
            if (dataset == null)
            {
                throw new ArgumentNullException("dataset is a required property for DatasetAndUsage and cannot be null");
            }
            this.Dataset = dataset;
            // to ensure "datasetUsage" is required (not null)
            if (datasetUsage == null)
            {
                throw new ArgumentNullException("datasetUsage is a required property for DatasetAndUsage and cannot be null");
            }
            this.DatasetUsage = datasetUsage;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        [DataMember(Name = "dataset", IsRequired = true, EmitDefaultValue = true)]
        public DatasetDTO Dataset { get; set; }

        /// <summary>
        /// Gets or Sets DatasetUsage
        /// </summary>
        [DataMember(Name = "dataset_usage", IsRequired = true, EmitDefaultValue = true)]
        public DatasetUsageCount DatasetUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatasetAndUsage {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  DatasetUsage: ").Append(DatasetUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
