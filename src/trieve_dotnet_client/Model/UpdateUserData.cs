/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// UpdateUserData
    /// </summary>
    [DataContract(Name = "UpdateUserData")]
    public partial class UpdateUserData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateUserData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserData" /> class.
        /// </summary>
        /// <param name="name">In the sense of a legal name, not a username. The new name to assign to the user, if not provided, the current name will be used..</param>
        /// <param name="organizationId">The id of the organization to update the user for. (required).</param>
        /// <param name="role">Either 0 (user), 1 (admin), or 2 (owner). If not provided, the current role will be used. The auth&#39;ed user must have a role greater than or equal to the role being assigned..</param>
        /// <param name="userId">The id of the user to update, if not provided, the auth&#39;ed user will be updated. If provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization..</param>
        /// <param name="username">The new username to assign to the user, if not provided, the current username will be used..</param>
        /// <param name="visibleEmail">Determines if the user&#39;s email is visible to other users, if not provided, the current value will be used..</param>
        /// <param name="website">The new website to assign to the user, if not provided, the current website will be used. Used for linking to the user&#39;s personal or company website..</param>
        public UpdateUserData(string name = default(string), Guid organizationId = default(Guid), int? role = default(int?), Guid? userId = default(Guid?), string username = default(string), bool? visibleEmail = default(bool?), string website = default(string))
        {
            this.OrganizationId = organizationId;
            this.Name = name;
            this.Role = role;
            this.UserId = userId;
            this.Username = username;
            this.VisibleEmail = visibleEmail;
            this.Website = website;
        }

        /// <summary>
        /// In the sense of a legal name, not a username. The new name to assign to the user, if not provided, the current name will be used.
        /// </summary>
        /// <value>In the sense of a legal name, not a username. The new name to assign to the user, if not provided, the current name will be used.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The id of the organization to update the user for.
        /// </summary>
        /// <value>The id of the organization to update the user for.</value>
        [DataMember(Name = "organization_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// Either 0 (user), 1 (admin), or 2 (owner). If not provided, the current role will be used. The auth&#39;ed user must have a role greater than or equal to the role being assigned.
        /// </summary>
        /// <value>Either 0 (user), 1 (admin), or 2 (owner). If not provided, the current role will be used. The auth&#39;ed user must have a role greater than or equal to the role being assigned.</value>
        [DataMember(Name = "role", EmitDefaultValue = true)]
        public int? Role { get; set; }

        /// <summary>
        /// The id of the user to update, if not provided, the auth&#39;ed user will be updated. If provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </summary>
        /// <value>The id of the user to update, if not provided, the auth&#39;ed user will be updated. If provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// The new username to assign to the user, if not provided, the current username will be used.
        /// </summary>
        /// <value>The new username to assign to the user, if not provided, the current username will be used.</value>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Determines if the user&#39;s email is visible to other users, if not provided, the current value will be used.
        /// </summary>
        /// <value>Determines if the user&#39;s email is visible to other users, if not provided, the current value will be used.</value>
        [DataMember(Name = "visible_email", EmitDefaultValue = true)]
        public bool? VisibleEmail { get; set; }

        /// <summary>
        /// The new website to assign to the user, if not provided, the current website will be used. Used for linking to the user&#39;s personal or company website.
        /// </summary>
        /// <value>The new website to assign to the user, if not provided, the current website will be used. Used for linking to the user&#39;s personal or company website.</value>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateUserData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VisibleEmail: ").Append(VisibleEmail).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
