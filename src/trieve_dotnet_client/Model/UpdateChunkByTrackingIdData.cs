/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// UpdateChunkByTrackingIdData
    /// </summary>
    [DataContract(Name = "UpdateChunkByTrackingIdData")]
    public partial class UpdateChunkByTrackingIdData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChunkByTrackingIdData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateChunkByTrackingIdData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChunkByTrackingIdData" /> class.
        /// </summary>
        /// <param name="chunkHtml">HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used..</param>
        /// <param name="groupIds">Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request..</param>
        /// <param name="groupTrackingIds">Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request..</param>
        /// <param name="link">Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used..</param>
        /// <param name="metadata">The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used..</param>
        /// <param name="timeStamp">Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used..</param>
        /// <param name="trackingId">Tracking_id of the chunk you want to update. This is required to match an existing chunk. (required).</param>
        /// <param name="weight">Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset. If no weight is provided, the existing weight will be used..</param>
        public UpdateChunkByTrackingIdData(string chunkHtml = default(string), List<Guid> groupIds = default(List<Guid>), List<string> groupTrackingIds = default(List<string>), string link = default(string), Object metadata = default(Object), string timeStamp = default(string), string trackingId = default(string), double? weight = default(double?))
        {
            // to ensure "trackingId" is required (not null)
            if (trackingId == null)
            {
                throw new ArgumentNullException("trackingId is a required property for UpdateChunkByTrackingIdData and cannot be null");
            }
            this.TrackingId = trackingId;
            this.ChunkHtml = chunkHtml;
            this.GroupIds = groupIds;
            this.GroupTrackingIds = groupTrackingIds;
            this.Link = link;
            this.Metadata = metadata;
            this.TimeStamp = timeStamp;
            this.Weight = weight;
        }

        /// <summary>
        /// HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used.
        /// </summary>
        /// <value>HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used.</value>
        [DataMember(Name = "chunk_html", EmitDefaultValue = true)]
        public string ChunkHtml { get; set; }

        /// <summary>
        /// Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
        /// </summary>
        /// <value>Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.</value>
        [DataMember(Name = "group_ids", EmitDefaultValue = true)]
        public List<Guid> GroupIds { get; set; }

        /// <summary>
        /// Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
        /// </summary>
        /// <value>Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.</value>
        [DataMember(Name = "group_tracking_ids", EmitDefaultValue = true)]
        public List<string> GroupTrackingIds { get; set; }

        /// <summary>
        /// Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used.
        /// </summary>
        /// <value>Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used.</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used.
        /// </summary>
        /// <value>The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used.
        /// </summary>
        /// <value>Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used.</value>
        [DataMember(Name = "time_stamp", EmitDefaultValue = true)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// Tracking_id of the chunk you want to update. This is required to match an existing chunk.
        /// </summary>
        /// <value>Tracking_id of the chunk you want to update. This is required to match an existing chunk.</value>
        [DataMember(Name = "tracking_id", IsRequired = true, EmitDefaultValue = true)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset. If no weight is provided, the existing weight will be used.
        /// </summary>
        /// <value>Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk&#39;s dataset dataset. If no weight is provided, the existing weight will be used.</value>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public double? Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateChunkByTrackingIdData {\n");
            sb.Append("  ChunkHtml: ").Append(ChunkHtml).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  GroupTrackingIds: ").Append(GroupTrackingIds).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
