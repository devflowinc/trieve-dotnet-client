/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// InvitationData
    /// </summary>
    [DataContract(Name = "InvitationData")]
    public partial class InvitationData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvitationData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationData" /> class.
        /// </summary>
        /// <param name="appUrl">The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups. (required).</param>
        /// <param name="email">The email of the user to invite. Must be a valid email as they will be sent an email to register. (required).</param>
        /// <param name="organizationId">The id of the organization to invite the user to. (required).</param>
        /// <param name="redirectUri">The url that the user will be redirected to after setting their password. (required).</param>
        /// <param name="userRole">The role the user will have in the organization. 0 &#x3D; User, 1 &#x3D; Admin, 2 &#x3D; Owner. (required).</param>
        public InvitationData(string appUrl = default(string), string email = default(string), Guid organizationId = default(Guid), string redirectUri = default(string), int userRole = default(int))
        {
            // to ensure "appUrl" is required (not null)
            if (appUrl == null)
            {
                throw new ArgumentNullException("appUrl is a required property for InvitationData and cannot be null");
            }
            this.AppUrl = appUrl;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for InvitationData and cannot be null");
            }
            this.Email = email;
            this.OrganizationId = organizationId;
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new ArgumentNullException("redirectUri is a required property for InvitationData and cannot be null");
            }
            this.RedirectUri = redirectUri;
            this.UserRole = userRole;
        }

        /// <summary>
        /// The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups.
        /// </summary>
        /// <value>The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups.</value>
        [DataMember(Name = "app_url", IsRequired = true, EmitDefaultValue = true)]
        public string AppUrl { get; set; }

        /// <summary>
        /// The email of the user to invite. Must be a valid email as they will be sent an email to register.
        /// </summary>
        /// <value>The email of the user to invite. Must be a valid email as they will be sent an email to register.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The id of the organization to invite the user to.
        /// </summary>
        /// <value>The id of the organization to invite the user to.</value>
        [DataMember(Name = "organization_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// The url that the user will be redirected to after setting their password.
        /// </summary>
        /// <value>The url that the user will be redirected to after setting their password.</value>
        [DataMember(Name = "redirect_uri", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// The role the user will have in the organization. 0 &#x3D; User, 1 &#x3D; Admin, 2 &#x3D; Owner.
        /// </summary>
        /// <value>The role the user will have in the organization. 0 &#x3D; User, 1 &#x3D; Admin, 2 &#x3D; Owner.</value>
        [DataMember(Name = "user_role", IsRequired = true, EmitDefaultValue = true)]
        public int UserRole { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvitationData {\n");
            sb.Append("  AppUrl: ").Append(AppUrl).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
