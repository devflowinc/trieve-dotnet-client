/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// ChunkFilter
    /// </summary>
    [DataContract(Name = "ChunkFilter")]
    public partial class ChunkFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkFilter" /> class.
        /// </summary>
        /// <param name="must">All of these field conditions have to match for the chunk to be included in the result set..</param>
        /// <param name="mustNot">None of these field conditions can match for the chunk to be included in the result set..</param>
        /// <param name="should">Only one of these field conditions has to match for the chunk to be included in the result set..</param>
        public ChunkFilter(List<FieldCondition> must = default(List<FieldCondition>), List<FieldCondition> mustNot = default(List<FieldCondition>), List<FieldCondition> should = default(List<FieldCondition>))
        {
            this.Must = must;
            this.MustNot = mustNot;
            this.Should = should;
        }

        /// <summary>
        /// All of these field conditions have to match for the chunk to be included in the result set.
        /// </summary>
        /// <value>All of these field conditions have to match for the chunk to be included in the result set.</value>
        [DataMember(Name = "must", EmitDefaultValue = true)]
        public List<FieldCondition> Must { get; set; }

        /// <summary>
        /// None of these field conditions can match for the chunk to be included in the result set.
        /// </summary>
        /// <value>None of these field conditions can match for the chunk to be included in the result set.</value>
        [DataMember(Name = "must_not", EmitDefaultValue = true)]
        public List<FieldCondition> MustNot { get; set; }

        /// <summary>
        /// Only one of these field conditions has to match for the chunk to be included in the result set.
        /// </summary>
        /// <value>Only one of these field conditions has to match for the chunk to be included in the result set.</value>
        [DataMember(Name = "should", EmitDefaultValue = true)]
        public List<FieldCondition> Should { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChunkFilter {\n");
            sb.Append("  Must: ").Append(Must).Append("\n");
            sb.Append("  MustNot: ").Append(MustNot).Append("\n");
            sb.Append("  Should: ").Append(Should).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
