/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// SearchWithinGroupData
    /// </summary>
    [DataContract(Name = "SearchWithinGroupData")]
    public partial class SearchWithinGroupData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithinGroupData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchWithinGroupData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithinGroupData" /> class.
        /// </summary>
        /// <param name="dateBias">Set date_bias to true to bias search results towards more recent chunks. This will work best in hybrid search mode..</param>
        /// <param name="filters">filters.</param>
        /// <param name="groupId">Group specifies the group to search within. Results will only consist of chunks which are bookmarks within the specified group..</param>
        /// <param name="groupTrackingId">Group_tracking_id specifies the group to search within by tracking id. Results will only consist of chunks which are bookmarks within the specified group. If both group_id and group_tracking_id are provided, group_id will be used..</param>
        /// <param name="highlightDelimiters">Set highlight_delimiters to a list of strings to use as delimiters for highlighting. If not specified, this defaults to [\&quot;?\&quot;, \&quot;,\&quot;, \&quot;.\&quot;, \&quot;!\&quot;]..</param>
        /// <param name="highlightResults">Set highlight_results to true to highlight the results. If not specified, this defaults to true..</param>
        /// <param name="page">The page of chunks to fetch. Each page is 10 chunks. Support for custom page size is coming soon..</param>
        /// <param name="pageSize">The page size is the number of chunks to fetch. This can be used to fetch more than 10 chunks at a time..</param>
        /// <param name="query">The query is the search query. This can be any string. The query will be used to create an embedding vector and/or SPLADE vector which will be used to find the result set. (required).</param>
        /// <param name="scoreThreshold">Set score_threshold to a float to filter out chunks with a score below the threshold..</param>
        /// <param name="searchType">Search_type can be either \&quot;semantic\&quot;, \&quot;fulltext\&quot;, or \&quot;hybrid\&quot;. \&quot;hybrid\&quot; will pull in one page (10 chunks) of both semantic and full-text results then re-rank them using BAAI/bge-reranker-large. \&quot;semantic\&quot; will pull in one page (10 chunks) of the nearest cosine distant vectors. \&quot;fulltext\&quot; will pull in one page (10 chunks) of full-text results based on SPLADE. (required).</param>
        /// <param name="useWeights">Set use_weights to true to use the weights of the chunks in the result set in order to sort them. If not specified, this defaults to true..</param>
        public SearchWithinGroupData(bool? dateBias = default(bool?), ChunkFilter filters = default(ChunkFilter), Guid? groupId = default(Guid?), string groupTrackingId = default(string), List<string> highlightDelimiters = default(List<string>), bool? highlightResults = default(bool?), long? page = default(long?), long? pageSize = default(long?), string query = default(string), float? scoreThreshold = default(float?), string searchType = default(string), bool? useWeights = default(bool?))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for SearchWithinGroupData and cannot be null");
            }
            this.Query = query;
            // to ensure "searchType" is required (not null)
            if (searchType == null)
            {
                throw new ArgumentNullException("searchType is a required property for SearchWithinGroupData and cannot be null");
            }
            this.SearchType = searchType;
            this.DateBias = dateBias;
            this.Filters = filters;
            this.GroupId = groupId;
            this.GroupTrackingId = groupTrackingId;
            this.HighlightDelimiters = highlightDelimiters;
            this.HighlightResults = highlightResults;
            this.Page = page;
            this.PageSize = pageSize;
            this.ScoreThreshold = scoreThreshold;
            this.UseWeights = useWeights;
        }

        /// <summary>
        /// Set date_bias to true to bias search results towards more recent chunks. This will work best in hybrid search mode.
        /// </summary>
        /// <value>Set date_bias to true to bias search results towards more recent chunks. This will work best in hybrid search mode.</value>
        [DataMember(Name = "date_bias", EmitDefaultValue = true)]
        public bool? DateBias { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public ChunkFilter Filters { get; set; }

        /// <summary>
        /// Group specifies the group to search within. Results will only consist of chunks which are bookmarks within the specified group.
        /// </summary>
        /// <value>Group specifies the group to search within. Results will only consist of chunks which are bookmarks within the specified group.</value>
        [DataMember(Name = "group_id", EmitDefaultValue = true)]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Group_tracking_id specifies the group to search within by tracking id. Results will only consist of chunks which are bookmarks within the specified group. If both group_id and group_tracking_id are provided, group_id will be used.
        /// </summary>
        /// <value>Group_tracking_id specifies the group to search within by tracking id. Results will only consist of chunks which are bookmarks within the specified group. If both group_id and group_tracking_id are provided, group_id will be used.</value>
        [DataMember(Name = "group_tracking_id", EmitDefaultValue = true)]
        public string GroupTrackingId { get; set; }

        /// <summary>
        /// Set highlight_delimiters to a list of strings to use as delimiters for highlighting. If not specified, this defaults to [\&quot;?\&quot;, \&quot;,\&quot;, \&quot;.\&quot;, \&quot;!\&quot;].
        /// </summary>
        /// <value>Set highlight_delimiters to a list of strings to use as delimiters for highlighting. If not specified, this defaults to [\&quot;?\&quot;, \&quot;,\&quot;, \&quot;.\&quot;, \&quot;!\&quot;].</value>
        [DataMember(Name = "highlight_delimiters", EmitDefaultValue = true)]
        public List<string> HighlightDelimiters { get; set; }

        /// <summary>
        /// Set highlight_results to true to highlight the results. If not specified, this defaults to true.
        /// </summary>
        /// <value>Set highlight_results to true to highlight the results. If not specified, this defaults to true.</value>
        [DataMember(Name = "highlight_results", EmitDefaultValue = true)]
        public bool? HighlightResults { get; set; }

        /// <summary>
        /// The page of chunks to fetch. Each page is 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <value>The page of chunks to fetch. Each page is 10 chunks. Support for custom page size is coming soon.</value>
        [DataMember(Name = "page", EmitDefaultValue = true)]
        public long? Page { get; set; }

        /// <summary>
        /// The page size is the number of chunks to fetch. This can be used to fetch more than 10 chunks at a time.
        /// </summary>
        /// <value>The page size is the number of chunks to fetch. This can be used to fetch more than 10 chunks at a time.</value>
        [DataMember(Name = "page_size", EmitDefaultValue = true)]
        public long? PageSize { get; set; }

        /// <summary>
        /// The query is the search query. This can be any string. The query will be used to create an embedding vector and/or SPLADE vector which will be used to find the result set.
        /// </summary>
        /// <value>The query is the search query. This can be any string. The query will be used to create an embedding vector and/or SPLADE vector which will be used to find the result set.</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Set score_threshold to a float to filter out chunks with a score below the threshold.
        /// </summary>
        /// <value>Set score_threshold to a float to filter out chunks with a score below the threshold.</value>
        [DataMember(Name = "score_threshold", EmitDefaultValue = true)]
        public float? ScoreThreshold { get; set; }

        /// <summary>
        /// Search_type can be either \&quot;semantic\&quot;, \&quot;fulltext\&quot;, or \&quot;hybrid\&quot;. \&quot;hybrid\&quot; will pull in one page (10 chunks) of both semantic and full-text results then re-rank them using BAAI/bge-reranker-large. \&quot;semantic\&quot; will pull in one page (10 chunks) of the nearest cosine distant vectors. \&quot;fulltext\&quot; will pull in one page (10 chunks) of full-text results based on SPLADE.
        /// </summary>
        /// <value>Search_type can be either \&quot;semantic\&quot;, \&quot;fulltext\&quot;, or \&quot;hybrid\&quot;. \&quot;hybrid\&quot; will pull in one page (10 chunks) of both semantic and full-text results then re-rank them using BAAI/bge-reranker-large. \&quot;semantic\&quot; will pull in one page (10 chunks) of the nearest cosine distant vectors. \&quot;fulltext\&quot; will pull in one page (10 chunks) of full-text results based on SPLADE.</value>
        [DataMember(Name = "search_type", IsRequired = true, EmitDefaultValue = true)]
        public string SearchType { get; set; }

        /// <summary>
        /// Set use_weights to true to use the weights of the chunks in the result set in order to sort them. If not specified, this defaults to true.
        /// </summary>
        /// <value>Set use_weights to true to use the weights of the chunks in the result set in order to sort them. If not specified, this defaults to true.</value>
        [DataMember(Name = "use_weights", EmitDefaultValue = true)]
        public bool? UseWeights { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchWithinGroupData {\n");
            sb.Append("  DateBias: ").Append(DateBias).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupTrackingId: ").Append(GroupTrackingId).Append("\n");
            sb.Append("  HighlightDelimiters: ").Append(HighlightDelimiters).Append("\n");
            sb.Append("  HighlightResults: ").Append(HighlightResults).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  ScoreThreshold: ").Append(ScoreThreshold).Append("\n");
            sb.Append("  SearchType: ").Append(SearchType).Append("\n");
            sb.Append("  UseWeights: ").Append(UseWeights).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Page (long?) minimum
            if (this.Page < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 0.", new [] { "Page" });
            }

            // PageSize (long?) minimum
            if (this.PageSize < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 0.", new [] { "PageSize" });
            }

            yield break;
        }
    }

}
