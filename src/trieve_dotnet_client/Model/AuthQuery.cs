/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = trieve_dotnet_client.Client.OpenAPIDateConverter;

namespace trieve_dotnet_client.Model
{
    /// <summary>
    /// AuthQuery
    /// </summary>
    [DataContract(Name = "AuthQuery")]
    public partial class AuthQuery : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthQuery" /> class.
        /// </summary>
        /// <param name="invCode">Code sent via email as a result of successful call to send_invitation.</param>
        /// <param name="organizationId">ID of organization to authenticate into.</param>
        /// <param name="redirectUri">URL to redirect to after successful login.</param>
        public AuthQuery(Guid? invCode = default(Guid?), Guid? organizationId = default(Guid?), string redirectUri = default(string))
        {
            this.InvCode = invCode;
            this.OrganizationId = organizationId;
            this.RedirectUri = redirectUri;
        }

        /// <summary>
        /// Code sent via email as a result of successful call to send_invitation
        /// </summary>
        /// <value>Code sent via email as a result of successful call to send_invitation</value>
        [DataMember(Name = "inv_code", EmitDefaultValue = true)]
        public Guid? InvCode { get; set; }

        /// <summary>
        /// ID of organization to authenticate into
        /// </summary>
        /// <value>ID of organization to authenticate into</value>
        [DataMember(Name = "organization_id", EmitDefaultValue = true)]
        public Guid? OrganizationId { get; set; }

        /// <summary>
        /// URL to redirect to after successful login
        /// </summary>
        /// <value>URL to redirect to after successful login</value>
        [DataMember(Name = "redirect_uri", EmitDefaultValue = true)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthQuery {\n");
            sb.Append("  InvCode: ").Append(InvCode).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
