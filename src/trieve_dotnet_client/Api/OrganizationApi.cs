/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        Organization CreateOrganization(CreateOrganizationData createOrganizationData, int operationIndex = 0);

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> CreateOrganizationWithHttpInfo(CreateOrganizationData createOrganizationData, int operationIndex = 0);
        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        Organization DeleteOrganizationById(string tROrganization, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> DeleteOrganizationByIdWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        Organization GetOrganizationById(string tROrganization, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationByIdWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Get Organization Usage
        /// </summary>
        /// <remarks>
        /// Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationUsageCount</returns>
        OrganizationUsageCount GetOrganizationUsage(string tROrganization, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Get Organization Usage
        /// </summary>
        /// <remarks>
        /// Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationUsageCount</returns>
        ApiResponse<OrganizationUsageCount> GetOrganizationUsageWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Get Organization Users
        /// </summary>
        /// <remarks>
        /// Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SlimUser&gt;</returns>
        List<SlimUser> GetOrganizationUsers(string tROrganization, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Get Organization Users
        /// </summary>
        /// <remarks>
        /// Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SlimUser&gt;</returns>
        ApiResponse<List<SlimUser>> GetOrganizationUsersWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        Organization UpdateOrganization(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0);

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> UpdateOrganizationWithHttpInfo(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> CreateOrganizationAsync(CreateOrganizationData createOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> CreateOrganizationWithHttpInfoAsync(CreateOrganizationData createOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> DeleteOrganizationByIdAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> DeleteOrganizationByIdWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationByIdAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationByIdWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Organization Usage
        /// </summary>
        /// <remarks>
        /// Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationUsageCount</returns>
        System.Threading.Tasks.Task<OrganizationUsageCount> GetOrganizationUsageAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Organization Usage
        /// </summary>
        /// <remarks>
        /// Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationUsageCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationUsageCount>> GetOrganizationUsageWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Organization Users
        /// </summary>
        /// <remarks>
        /// Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlimUser&gt;</returns>
        System.Threading.Tasks.Task<List<SlimUser>> GetOrganizationUsersAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Organization Users
        /// </summary>
        /// <remarks>
        /// Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlimUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlimUser>>> GetOrganizationUsersWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> UpdateOrganizationWithHttpInfoAsync(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApi : IOrganizationApiSync, IOrganizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationApi : IOrganizationApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganizationApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Organization Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        public Organization CreateOrganization(CreateOrganizationData createOrganizationData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = CreateOrganizationWithHttpInfo(createOrganizationData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Organization Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        public trieve_dotnet_client.Client.ApiResponse<Organization> CreateOrganizationWithHttpInfo(CreateOrganizationData createOrganizationData, int operationIndex = 0)
        {
            // verify the required parameter 'createOrganizationData' is set
            if (createOrganizationData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createOrganizationData' when calling OrganizationApi->CreateOrganization");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrganizationData;

            localVarRequestOptions.Operation = "OrganizationApi.CreateOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Organization>("/api/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Organization Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> CreateOrganizationAsync(CreateOrganizationData createOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = await CreateOrganizationWithHttpInfoAsync(createOrganizationData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Organization Create Organization  Create a new organization. The auth&#39;ed user who creates the organization will be the default owner of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationData">The organization data that you want to create</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Organization>> CreateOrganizationWithHttpInfoAsync(CreateOrganizationData createOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOrganizationData' is set
            if (createOrganizationData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createOrganizationData' when calling OrganizationApi->CreateOrganization");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrganizationData;

            localVarRequestOptions.Operation = "OrganizationApi.CreateOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Organization>("/api/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Organization Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        public Organization DeleteOrganizationById(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = DeleteOrganizationByIdWithHttpInfo(tROrganization, organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Organization Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        public trieve_dotnet_client.Client.ApiResponse<Organization> DeleteOrganizationByIdWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->DeleteOrganizationById");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.DeleteOrganizationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Organization>("/api/organization/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Organization Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> DeleteOrganizationByIdAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = await DeleteOrganizationByIdWithHttpInfoAsync(tROrganization, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Organization Delete Organization  Delete an organization by its id. The auth&#39;ed user must be an owner of the organization to delete it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Organization>> DeleteOrganizationByIdWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->DeleteOrganizationById");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.DeleteOrganizationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Organization>("/api/organization/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        public Organization GetOrganizationById(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = GetOrganizationByIdWithHttpInfo(tROrganization, organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        public trieve_dotnet_client.Client.ApiResponse<Organization> GetOrganizationByIdWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationById");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Organization>("/api/organization/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationByIdAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = await GetOrganizationByIdWithHttpInfoAsync(tROrganization, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Get Organization  Fetch the details of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Organization>> GetOrganizationByIdWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationById");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Organization>("/api/organization/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Usage Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganizationUsageCount</returns>
        public OrganizationUsageCount GetOrganizationUsage(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<OrganizationUsageCount> localVarResponse = GetOrganizationUsageWithHttpInfo(tROrganization, organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Usage Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganizationUsageCount</returns>
        public trieve_dotnet_client.Client.ApiResponse<OrganizationUsageCount> GetOrganizationUsageWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationUsage");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganizationUsageCount>("/api/organization/usage/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Usage Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganizationUsageCount</returns>
        public async System.Threading.Tasks.Task<OrganizationUsageCount> GetOrganizationUsageAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<OrganizationUsageCount> localVarResponse = await GetOrganizationUsageWithHttpInfoAsync(tROrganization, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Usage Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the usage of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganizationUsageCount)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<OrganizationUsageCount>> GetOrganizationUsageWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationUsage");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganizationUsageCount>("/api/organization/usage/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Users Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SlimUser&gt;</returns>
        public List<SlimUser> GetOrganizationUsers(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<SlimUser>> localVarResponse = GetOrganizationUsersWithHttpInfo(tROrganization, organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Users Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SlimUser&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<SlimUser>> GetOrganizationUsersWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationUsers");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SlimUser>>("/api/organization/users/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Organization Users Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlimUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlimUser>> GetOrganizationUsersAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<SlimUser>> localVarResponse = await GetOrganizationUsersWithHttpInfoAsync(tROrganization, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Organization Users Get Organization Users  Fetch the users of an organization by its id. The auth&#39;ed user must be an admin or owner of the organization to fetch it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">The id of the organization you want to fetch the users of.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlimUser&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<SlimUser>>> GetOrganizationUsersWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->GetOrganizationUsers");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "OrganizationApi.GetOrganizationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SlimUser>>("/api/organization/users/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Organization Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        public Organization UpdateOrganization(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = UpdateOrganizationWithHttpInfo(tROrganization, updateOrganizationData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Organization Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        public trieve_dotnet_client.Client.ApiResponse<Organization> UpdateOrganizationWithHttpInfo(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->UpdateOrganization");
            }

            // verify the required parameter 'updateOrganizationData' is set
            if (updateOrganizationData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateOrganizationData' when calling OrganizationApi->UpdateOrganization");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = updateOrganizationData;

            localVarRequestOptions.Operation = "OrganizationApi.UpdateOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Organization>("/api/organization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Organization Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Organization> localVarResponse = await UpdateOrganizationWithHttpInfoAsync(tROrganization, updateOrganizationData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Organization Update Organization  Update an organization. Only the owner of the organization can update it.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateOrganizationData">The organization data that you want to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Organization>> UpdateOrganizationWithHttpInfoAsync(string tROrganization, UpdateOrganizationData updateOrganizationData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling OrganizationApi->UpdateOrganization");
            }

            // verify the required parameter 'updateOrganizationData' is set
            if (updateOrganizationData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateOrganizationData' when calling OrganizationApi->UpdateOrganization");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = updateOrganizationData;

            localVarRequestOptions.Operation = "OrganizationApi.UpdateOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Organization>("/api/organization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
