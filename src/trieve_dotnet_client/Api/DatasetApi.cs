/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create dataset
        /// </summary>
        /// <remarks>
        /// Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset CreateDataset(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0);

        /// <summary>
        /// Create dataset
        /// </summary>
        /// <remarks>
        /// Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> CreateDatasetWithHttpInfo(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Dataset
        /// </summary>
        /// <remarks>
        /// Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataset(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Dataset
        /// </summary>
        /// <remarks>
        /// Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDatasetWithHttpInfo(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0);
        /// <summary>
        /// Get Client Configuration
        /// </summary>
        /// <remarks>
        /// Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientDatasetConfiguration</returns>
        ClientDatasetConfiguration GetClientDatasetConfig(string tRDataset, int operationIndex = 0);

        /// <summary>
        /// Get Client Configuration
        /// </summary>
        /// <remarks>
        /// Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientDatasetConfiguration</returns>
        ApiResponse<ClientDatasetConfiguration> GetClientDatasetConfigWithHttpInfo(string tRDataset, int operationIndex = 0);
        /// <summary>
        /// Get Dataset
        /// </summary>
        /// <remarks>
        /// Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset GetDataset(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0);

        /// <summary>
        /// Get Dataset
        /// </summary>
        /// <remarks>
        /// Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> GetDatasetWithHttpInfo(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0);
        /// <summary>
        /// Get Datasets from Organization
        /// </summary>
        /// <remarks>
        /// Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DatasetAndUsage&gt;</returns>
        List<DatasetAndUsage> GetDatasetsFromOrganization(string tROrganization, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Get Datasets from Organization
        /// </summary>
        /// <remarks>
        /// Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DatasetAndUsage&gt;</returns>
        ApiResponse<List<DatasetAndUsage>> GetDatasetsFromOrganizationWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Update Dataset
        /// </summary>
        /// <remarks>
        /// Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        Dataset UpdateDataset(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0);

        /// <summary>
        /// Update Dataset
        /// </summary>
        /// <remarks>
        /// Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create dataset
        /// </summary>
        /// <remarks>
        /// Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create dataset
        /// </summary>
        /// <remarks>
        /// Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Dataset
        /// </summary>
        /// <remarks>
        /// Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDatasetAsync(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Dataset
        /// </summary>
        /// <remarks>
        /// Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Client Configuration
        /// </summary>
        /// <remarks>
        /// Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientDatasetConfiguration</returns>
        System.Threading.Tasks.Task<ClientDatasetConfiguration> GetClientDatasetConfigAsync(string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Client Configuration
        /// </summary>
        /// <remarks>
        /// Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientDatasetConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientDatasetConfiguration>> GetClientDatasetConfigWithHttpInfoAsync(string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Dataset
        /// </summary>
        /// <remarks>
        /// Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> GetDatasetAsync(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Dataset
        /// </summary>
        /// <remarks>
        /// Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> GetDatasetWithHttpInfoAsync(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Datasets from Organization
        /// </summary>
        /// <remarks>
        /// Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetAndUsage&gt;</returns>
        System.Threading.Tasks.Task<List<DatasetAndUsage>> GetDatasetsFromOrganizationAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Datasets from Organization
        /// </summary>
        /// <remarks>
        /// Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetAndUsage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatasetAndUsage>>> GetDatasetsFromOrganizationWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Dataset
        /// </summary>
        /// <remarks>
        /// Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Dataset
        /// </summary>
        /// <remarks>
        /// Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasetApi : IDatasetApiSync, IDatasetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasetApi : IDatasetApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasetApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasetApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasetApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create dataset Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset CreateDataset(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = CreateDatasetWithHttpInfo(tROrganization, createDatasetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create dataset Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public trieve_dotnet_client.Client.ApiResponse<Dataset> CreateDatasetWithHttpInfo(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'createDatasetRequest' is set
            if (createDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createDatasetRequest' when calling DatasetApi->CreateDataset");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = createDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.CreateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dataset>("/api/dataset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create dataset Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> CreateDatasetAsync(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = await CreateDatasetWithHttpInfoAsync(tROrganization, createDatasetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create dataset Create dataset  Create a new dataset. The auth&#39;ed user must be an owner of the organization to create a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="createDatasetRequest">JSON request payload to create a new dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Dataset>> CreateDatasetWithHttpInfoAsync(string tROrganization, CreateDatasetRequest createDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->CreateDataset");
            }

            // verify the required parameter 'createDatasetRequest' is set
            if (createDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createDatasetRequest' when calling DatasetApi->CreateDataset");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = createDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.CreateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dataset>("/api/dataset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Dataset Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataset(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0)
        {
            DeleteDatasetWithHttpInfo(tROrganization, deleteDatasetRequest);
        }

        /// <summary>
        /// Delete Dataset Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DeleteDatasetWithHttpInfo(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'deleteDatasetRequest' is set
            if (deleteDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteDatasetRequest' when calling DatasetApi->DeleteDataset");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = deleteDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.DeleteDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/dataset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Dataset Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDatasetAsync(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDatasetWithHttpInfoAsync(tROrganization, deleteDatasetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Dataset Delete Dataset  Delete a dataset. The auth&#39;ed user must be an owner of the organization to delete a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="deleteDatasetRequest">JSON request payload to delete a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DeleteDatasetWithHttpInfoAsync(string tROrganization, DeleteDatasetRequest deleteDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->DeleteDataset");
            }

            // verify the required parameter 'deleteDatasetRequest' is set
            if (deleteDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteDatasetRequest' when calling DatasetApi->DeleteDataset");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = deleteDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.DeleteDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/dataset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Configuration Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientDatasetConfiguration</returns>
        public ClientDatasetConfiguration GetClientDatasetConfig(string tRDataset, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<ClientDatasetConfiguration> localVarResponse = GetClientDatasetConfigWithHttpInfo(tRDataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Configuration Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientDatasetConfiguration</returns>
        public trieve_dotnet_client.Client.ApiResponse<ClientDatasetConfiguration> GetClientDatasetConfigWithHttpInfo(string tRDataset, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling DatasetApi->GetClientDatasetConfig");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetClientDatasetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientDatasetConfiguration>("/api/dataset/envs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDatasetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Configuration Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientDatasetConfiguration</returns>
        public async System.Threading.Tasks.Task<ClientDatasetConfiguration> GetClientDatasetConfigAsync(string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<ClientDatasetConfiguration> localVarResponse = await GetClientDatasetConfigWithHttpInfoAsync(tRDataset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Configuration Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientDatasetConfiguration)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<ClientDatasetConfiguration>> GetClientDatasetConfigWithHttpInfoAsync(string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling DatasetApi->GetClientDatasetConfig");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetClientDatasetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientDatasetConfiguration>("/api/dataset/envs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDatasetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dataset Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset GetDataset(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = GetDatasetWithHttpInfo(tROrganization, tRDataset, datasetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dataset Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public trieve_dotnet_client.Client.ApiResponse<Dataset> GetDatasetWithHttpInfo(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->GetDataset");
            }

            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling DatasetApi->GetDataset");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dataset>("/api/dataset/{dataset_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Dataset Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> GetDatasetAsync(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = await GetDatasetWithHttpInfoAsync(tROrganization, tRDataset, datasetId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Dataset Get Dataset  Get a dataset by id. The auth&#39;ed user must be an admin or owner of the organization to get a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset you want to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Dataset>> GetDatasetWithHttpInfoAsync(string tROrganization, string tRDataset, Guid datasetId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->GetDataset");
            }

            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling DatasetApi->GetDataset");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dataset>("/api/dataset/{dataset_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Datasets from Organization Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DatasetAndUsage&gt;</returns>
        public List<DatasetAndUsage> GetDatasetsFromOrganization(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<DatasetAndUsage>> localVarResponse = GetDatasetsFromOrganizationWithHttpInfo(tROrganization, organizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Datasets from Organization Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DatasetAndUsage&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<DatasetAndUsage>> GetDatasetsFromOrganizationWithHttpInfo(string tROrganization, Guid organizationId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->GetDatasetsFromOrganization");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetsFromOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DatasetAndUsage>>("/api/dataset/organization/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetsFromOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Datasets from Organization Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatasetAndUsage&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatasetAndUsage>> GetDatasetsFromOrganizationAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<DatasetAndUsage>> localVarResponse = await GetDatasetsFromOrganizationWithHttpInfoAsync(tROrganization, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Datasets from Organization Get Datasets from Organization  Get all datasets for an organization. The auth&#39;ed user must be an admin or owner of the organization to get its datasets.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="organizationId">id of the organization you want to retrieve datasets for</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatasetAndUsage&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<DatasetAndUsage>>> GetDatasetsFromOrganizationWithHttpInfoAsync(string tROrganization, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->GetDatasetsFromOrganization");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "DatasetApi.GetDatasetsFromOrganization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DatasetAndUsage>>("/api/dataset/organization/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetsFromOrganization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Dataset Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dataset</returns>
        public Dataset UpdateDataset(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = UpdateDatasetWithHttpInfo(tROrganization, updateDatasetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Dataset Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dataset</returns>
        public trieve_dotnet_client.Client.ApiResponse<Dataset> UpdateDatasetWithHttpInfo(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'updateDatasetRequest' is set
            if (updateDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateDatasetRequest' when calling DatasetApi->UpdateDataset");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = updateDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Dataset>("/api/dataset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Dataset Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dataset</returns>
        public async System.Threading.Tasks.Task<Dataset> UpdateDatasetAsync(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Dataset> localVarResponse = await UpdateDatasetWithHttpInfoAsync(tROrganization, updateDatasetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Dataset Update Dataset  Update a dataset. The auth&#39;ed user must be an owner of the organization to update a dataset.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="updateDatasetRequest">JSON request payload to update a dataset</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dataset)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Dataset>> UpdateDatasetWithHttpInfoAsync(string tROrganization, UpdateDatasetRequest updateDatasetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling DatasetApi->UpdateDataset");
            }

            // verify the required parameter 'updateDatasetRequest' is set
            if (updateDatasetRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateDatasetRequest' when calling DatasetApi->UpdateDataset");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter
            localVarRequestOptions.Data = updateDatasetRequest;

            localVarRequestOptions.Operation = "DatasetApi.UpdateDataset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Dataset>("/api/dataset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
