/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStripeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel Subscription  Cancel a subscription by its id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelSubscription(string tROrganization, Guid subscriptionId, int operationIndex = 0);

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel Subscription  Cancel a subscription by its id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSubscriptionWithHttpInfo(string tROrganization, Guid subscriptionId, int operationIndex = 0);
        /// <summary>
        /// Checkout
        /// </summary>
        /// <remarks>
        /// Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DirectToPaymentLink(Guid planId, Guid organizationId, int operationIndex = 0);

        /// <summary>
        /// Checkout
        /// </summary>
        /// <remarks>
        /// Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DirectToPaymentLinkWithHttpInfo(Guid planId, Guid organizationId, int operationIndex = 0);
        /// <summary>
        /// Get All Plans
        /// </summary>
        /// <remarks>
        /// Get All Plans  Get a list of all plans
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StripePlan&gt;</returns>
        List<StripePlan> GetAllPlans(int operationIndex = 0);

        /// <summary>
        /// Get All Plans
        /// </summary>
        /// <remarks>
        /// Get All Plans  Get a list of all plans
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StripePlan&gt;</returns>
        ApiResponse<List<StripePlan>> GetAllPlansWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Update Subscription Plan  Update a subscription to a new plan
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateSubscriptionPlan(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0);

        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Update Subscription Plan  Update a subscription to a new plan
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSubscriptionPlanWithHttpInfo(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStripeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel Subscription  Cancel a subscription by its id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSubscriptionAsync(string tROrganization, Guid subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancel Subscription  Cancel a subscription by its id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSubscriptionWithHttpInfoAsync(string tROrganization, Guid subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Checkout
        /// </summary>
        /// <remarks>
        /// Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DirectToPaymentLinkAsync(Guid planId, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Checkout
        /// </summary>
        /// <remarks>
        /// Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DirectToPaymentLinkWithHttpInfoAsync(Guid planId, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Plans
        /// </summary>
        /// <remarks>
        /// Get All Plans  Get a list of all plans
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StripePlan&gt;</returns>
        System.Threading.Tasks.Task<List<StripePlan>> GetAllPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Plans
        /// </summary>
        /// <remarks>
        /// Get All Plans  Get a list of all plans
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StripePlan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StripePlan>>> GetAllPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Update Subscription Plan  Update a subscription to a new plan
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSubscriptionPlanAsync(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Subscription Plan
        /// </summary>
        /// <remarks>
        /// Update Subscription Plan  Update a subscription to a new plan
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubscriptionPlanWithHttpInfoAsync(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStripeApi : IStripeApiSync, IStripeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StripeApi : IStripeApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StripeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StripeApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StripeApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StripeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StripeApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Subscription Cancel Subscription  Cancel a subscription by its id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelSubscription(string tROrganization, Guid subscriptionId, int operationIndex = 0)
        {
            CancelSubscriptionWithHttpInfo(tROrganization, subscriptionId);
        }

        /// <summary>
        /// Cancel Subscription Cancel Subscription  Cancel a subscription by its id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> CancelSubscriptionWithHttpInfo(string tROrganization, Guid subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling StripeApi->CancelSubscription");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "StripeApi.CancelSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/stripe/subscription/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancel Subscription  Cancel a subscription by its id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSubscriptionAsync(string tROrganization, Guid subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelSubscriptionWithHttpInfoAsync(tROrganization, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Subscription Cancel Subscription  Cancel a subscription by its id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to cancel</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> CancelSubscriptionWithHttpInfoAsync(string tROrganization, Guid subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling StripeApi->CancelSubscription");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "StripeApi.CancelSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/stripe/subscription/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checkout Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DirectToPaymentLink(Guid planId, Guid organizationId, int operationIndex = 0)
        {
            DirectToPaymentLinkWithHttpInfo(planId, organizationId);
        }

        /// <summary>
        /// Checkout Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DirectToPaymentLinkWithHttpInfo(Guid planId, Guid organizationId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            localVarRequestOptions.Operation = "StripeApi.DirectToPaymentLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/stripe/payment_link/{plan_id}/{organization_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectToPaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Checkout Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DirectToPaymentLinkAsync(Guid planId, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DirectToPaymentLinkWithHttpInfoAsync(planId, organizationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checkout Checkout  Get a direct link to the stripe checkout page for the plan and organization
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="organizationId">id of the organization you want to subscribe to the plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DirectToPaymentLinkWithHttpInfoAsync(Guid planId, Guid organizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.PathParameters.Add("organization_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(organizationId)); // path parameter

            localVarRequestOptions.Operation = "StripeApi.DirectToPaymentLink";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/stripe/payment_link/{plan_id}/{organization_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectToPaymentLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Plans Get All Plans  Get a list of all plans
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StripePlan&gt;</returns>
        public List<StripePlan> GetAllPlans(int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<StripePlan>> localVarResponse = GetAllPlansWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Plans Get All Plans  Get a list of all plans
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StripePlan&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<StripePlan>> GetAllPlansWithHttpInfo(int operationIndex = 0)
        {
            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StripeApi.GetAllPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StripePlan>>("/api/stripe/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Plans Get All Plans  Get a list of all plans
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StripePlan&gt;</returns>
        public async System.Threading.Tasks.Task<List<StripePlan>> GetAllPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<StripePlan>> localVarResponse = await GetAllPlansWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Plans Get All Plans  Get a list of all plans
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StripePlan&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<StripePlan>>> GetAllPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StripeApi.GetAllPlans";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StripePlan>>("/api/stripe/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Plan Update Subscription Plan  Update a subscription to a new plan
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateSubscriptionPlan(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0)
        {
            UpdateSubscriptionPlanWithHttpInfo(tROrganization, subscriptionId, planId);
        }

        /// <summary>
        /// Update Subscription Plan Update Subscription Plan  Update a subscription to a new plan
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> UpdateSubscriptionPlanWithHttpInfo(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0)
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling StripeApi->UpdateSubscriptionPlan");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("plan_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "StripeApi.UpdateSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/stripe/subscription_plan/{subscription_id}/{plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription Plan Update Subscription Plan  Update a subscription to a new plan
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSubscriptionPlanAsync(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateSubscriptionPlanWithHttpInfoAsync(tROrganization, subscriptionId, planId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Subscription Plan Update Subscription Plan  Update a subscription to a new plan
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tROrganization">The organization id to use for the request</param>
        /// <param name="subscriptionId">id of the subscription you want to update</param>
        /// <param name="planId">id of the plan you want to subscribe to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> UpdateSubscriptionPlanWithHttpInfoAsync(string tROrganization, Guid subscriptionId, Guid planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tROrganization' is set
            if (tROrganization == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tROrganization' when calling StripeApi->UpdateSubscriptionPlan");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("plan_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Organization", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tROrganization)); // header parameter

            localVarRequestOptions.Operation = "StripeApi.UpdateSubscriptionPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/stripe/subscription_plan/{subscription_id}/{plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
