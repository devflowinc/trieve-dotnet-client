/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFileHandler(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0);

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileHandlerWithHttpInfo(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0);
        /// <summary>
        /// Get Files for Dataset
        /// </summary>
        /// <remarks>
        /// Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        List<File> GetDatasetFilesHandler(string tRDataset, Guid datasetId, long page, int operationIndex = 0);

        /// <summary>
        /// Get Files for Dataset
        /// </summary>
        /// <remarks>
        /// Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        ApiResponse<List<File>> GetDatasetFilesHandlerWithHttpInfo(string tRDataset, Guid datasetId, long page, int operationIndex = 0);
        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileDTO</returns>
        FileDTO GetFileHandler(string tRDataset, Guid fileId, int operationIndex = 0);

        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileDTO</returns>
        ApiResponse<FileDTO> GetFileHandlerWithHttpInfo(string tRDataset, Guid fileId, int operationIndex = 0);
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadFileResult</returns>
        UploadFileResult UploadFileHandler(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadFileResult</returns>
        ApiResponse<UploadFileResult> UploadFileHandlerWithHttpInfo(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileHandlerAsync(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete File
        /// </summary>
        /// <remarks>
        /// Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileHandlerWithHttpInfoAsync(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Files for Dataset
        /// </summary>
        /// <remarks>
        /// Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        System.Threading.Tasks.Task<List<File>> GetDatasetFilesHandlerAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Files for Dataset
        /// </summary>
        /// <remarks>
        /// Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<File>>> GetDatasetFilesHandlerWithHttpInfoAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileDTO</returns>
        System.Threading.Tasks.Task<FileDTO> GetFileHandlerAsync(string tRDataset, Guid fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get File
        /// </summary>
        /// <remarks>
        /// Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDTO>> GetFileHandlerWithHttpInfoAsync(string tRDataset, Guid fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadFileResult</returns>
        System.Threading.Tasks.Task<UploadFileResult> UploadFileHandlerAsync(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload File
        /// </summary>
        /// <remarks>
        /// Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadFileResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadFileResult>> UploadFileHandlerWithHttpInfoAsync(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApi : IFileApiSync, IFileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileApi : IFileApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FileApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete File Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFileHandler(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0)
        {
            DeleteFileHandlerWithHttpInfo(tRDataset, fileId, deleteChunks);
        }

        /// <summary>
        /// Delete File Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DeleteFileHandlerWithHttpInfo(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->DeleteFileHandler");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(trieve_dotnet_client.Client.ClientUtils.ParameterToMultiMap("", "delete_chunks", deleteChunks));
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.DeleteFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/file/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete File Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileHandlerAsync(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFileHandlerWithHttpInfoAsync(tRDataset, fileId, deleteChunks, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete File Delete File  Delete a file from S3 attached to the server based on its id. This will disassociate chunks from the file, but will not delete the chunks. We plan to add support for deleting chunks in a release soon. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to delete</param>
        /// <param name="deleteChunks">Whether or not to delete the chunks associated with the file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DeleteFileHandlerWithHttpInfoAsync(string tRDataset, Guid fileId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->DeleteFileHandler");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(trieve_dotnet_client.Client.ClientUtils.ParameterToMultiMap("", "delete_chunks", deleteChunks));
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.DeleteFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/file/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Files for Dataset Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        public List<File> GetDatasetFilesHandler(string tRDataset, Guid datasetId, long page, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<File>> localVarResponse = GetDatasetFilesHandlerWithHttpInfo(tRDataset, datasetId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Files for Dataset Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<File>> GetDatasetFilesHandlerWithHttpInfo(string tRDataset, Guid datasetId, long page, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->GetDatasetFilesHandler");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.GetDatasetFilesHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<File>>("/api/dataset/files/{dataset_id}/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFilesHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Files for Dataset Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        public async System.Threading.Tasks.Task<List<File>> GetDatasetFilesHandlerAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<File>> localVarResponse = await GetDatasetFilesHandlerWithHttpInfoAsync(tRDataset, datasetId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Files for Dataset Get Files for Dataset  Get all files which belong to a given dataset specified by the dataset_id parameter. 10 files are returned per page.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch files for.</param>
        /// <param name="page">The page number of files you wish to fetch. Each page contains at most 10 files.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<File>>> GetDatasetFilesHandlerWithHttpInfoAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->GetDatasetFilesHandler");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.GetDatasetFilesHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<File>>("/api/dataset/files/{dataset_id}/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasetFilesHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileDTO</returns>
        public FileDTO GetFileHandler(string tRDataset, Guid fileId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<FileDTO> localVarResponse = GetFileHandlerWithHttpInfo(tRDataset, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileDTO</returns>
        public trieve_dotnet_client.Client.ApiResponse<FileDTO> GetFileHandlerWithHttpInfo(string tRDataset, Guid fileId, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->GetFileHandler");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.GetFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileDTO>("/api/file/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get File Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileDTO</returns>
        public async System.Threading.Tasks.Task<FileDTO> GetFileHandlerAsync(string tRDataset, Guid fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<FileDTO> localVarResponse = await GetFileHandlerWithHttpInfoAsync(tRDataset, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get File Get File  Download a file from S3 attached to the server based on its id. We plan to add support for getting signed S3 URLs to download from S3 directly in a release soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="fileId">The id of the file to fetch</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileDTO)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<FileDTO>> GetFileHandlerWithHttpInfoAsync(string tRDataset, Guid fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->GetFileHandler");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "FileApi.GetFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileDTO>("/api/file/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadFileResult</returns>
        public UploadFileResult UploadFileHandler(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<UploadFileResult> localVarResponse = UploadFileHandlerWithHttpInfo(tRDataset, uploadFileData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadFileResult</returns>
        public trieve_dotnet_client.Client.ApiResponse<UploadFileResult> UploadFileHandlerWithHttpInfo(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->UploadFileHandler");
            }

            // verify the required parameter 'uploadFileData' is set
            if (uploadFileData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'uploadFileData' when calling FileApi->UploadFileHandler");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = uploadFileData;

            localVarRequestOptions.Operation = "FileApi.UploadFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadFileResult>("/api/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload File Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadFileResult</returns>
        public async System.Threading.Tasks.Task<UploadFileResult> UploadFileHandlerAsync(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<UploadFileResult> localVarResponse = await UploadFileHandlerWithHttpInfoAsync(tRDataset, uploadFileData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload File Upload File  Upload a file to S3 attached to the server. The file will be converted to HTML with tika and chunked algorithmically, images will be OCR&#39;ed with tesseract. The resulting chunks will be indexed and searchable. Optionally, you can only upload the file and manually create chunks associated to the file after. See docs.trieve.ai and/or contact us for more details and tips. Auth&#39;ed user must be an admin or owner of the dataset&#39;s organization to upload a file.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="uploadFileData">JSON request payload to upload a file</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadFileResult)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<UploadFileResult>> UploadFileHandlerWithHttpInfoAsync(string tRDataset, UploadFileData uploadFileData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling FileApi->UploadFileHandler");
            }

            // verify the required parameter 'uploadFileData' is set
            if (uploadFileData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'uploadFileData' when calling FileApi->UploadFileHandler");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = uploadFileData;

            localVarRequestOptions.Operation = "FileApi.UploadFileHandler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadFileResult>("/api/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileHandler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
