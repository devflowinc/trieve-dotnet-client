/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete User Api Key
        /// </summary>
        /// <remarks>
        /// Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ApiKeyDTO&gt;</returns>
        List<ApiKeyDTO> DeleteUserApiKey(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0);

        /// <summary>
        /// Delete User Api Key
        /// </summary>
        /// <remarks>
        /// Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ApiKeyDTO&gt;</returns>
        ApiResponse<List<ApiKeyDTO>> DeleteUserApiKeyWithHttpInfo(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0);
        /// <summary>
        /// Set User Api Key
        /// </summary>
        /// <remarks>
        /// Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetUserApiKeyResponse</returns>
        SetUserApiKeyResponse SetUserApiKey(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0);

        /// <summary>
        /// Set User Api Key
        /// </summary>
        /// <remarks>
        /// Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetUserApiKeyResponse</returns>
        ApiResponse<SetUserApiKeyResponse> SetUserApiKeyWithHttpInfo(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SlimUser</returns>
        SlimUser UpdateUser(UpdateUserData updateUserData, int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SlimUser</returns>
        ApiResponse<SlimUser> UpdateUserWithHttpInfo(UpdateUserData updateUserData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete User Api Key
        /// </summary>
        /// <remarks>
        /// Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApiKeyDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ApiKeyDTO>> DeleteUserApiKeyAsync(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User Api Key
        /// </summary>
        /// <remarks>
        /// Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKeyDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiKeyDTO>>> DeleteUserApiKeyWithHttpInfoAsync(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set User Api Key
        /// </summary>
        /// <remarks>
        /// Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetUserApiKeyResponse</returns>
        System.Threading.Tasks.Task<SetUserApiKeyResponse> SetUserApiKeyAsync(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set User Api Key
        /// </summary>
        /// <remarks>
        /// Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetUserApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetUserApiKeyResponse>> SetUserApiKeyWithHttpInfoAsync(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlimUser</returns>
        System.Threading.Tasks.Task<SlimUser> UpdateUserAsync(UpdateUserData updateUserData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlimUser>> UpdateUserWithHttpInfoAsync(UpdateUserData updateUserData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete User Api Key Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ApiKeyDTO&gt;</returns>
        public List<ApiKeyDTO> DeleteUserApiKey(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<ApiKeyDTO>> localVarResponse = DeleteUserApiKeyWithHttpInfo(deleteUserApiKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Api Key Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ApiKeyDTO&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<ApiKeyDTO>> DeleteUserApiKeyWithHttpInfo(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteUserApiKeyRequest' is set
            if (deleteUserApiKeyRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteUserApiKeyRequest' when calling UserApi->DeleteUserApiKey");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserApiKeyRequest;

            localVarRequestOptions.Operation = "UserApi.DeleteUserApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<ApiKeyDTO>>("/api/user/delete_api_key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Api Key Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ApiKeyDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiKeyDTO>> DeleteUserApiKeyAsync(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<ApiKeyDTO>> localVarResponse = await DeleteUserApiKeyWithHttpInfoAsync(deleteUserApiKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Api Key Delete User Api Key  Delete an api key for the auth&#39;ed user.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserApiKeyRequest">JSON request payload to delete a user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKeyDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<ApiKeyDTO>>> DeleteUserApiKeyWithHttpInfoAsync(DeleteUserApiKeyRequest deleteUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteUserApiKeyRequest' is set
            if (deleteUserApiKeyRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteUserApiKeyRequest' when calling UserApi->DeleteUserApiKey");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserApiKeyRequest;

            localVarRequestOptions.Operation = "UserApi.DeleteUserApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<ApiKeyDTO>>("/api/user/delete_api_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set User Api Key Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetUserApiKeyResponse</returns>
        public SetUserApiKeyResponse SetUserApiKey(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<SetUserApiKeyResponse> localVarResponse = SetUserApiKeyWithHttpInfo(setUserApiKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set User Api Key Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetUserApiKeyResponse</returns>
        public trieve_dotnet_client.Client.ApiResponse<SetUserApiKeyResponse> SetUserApiKeyWithHttpInfo(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setUserApiKeyRequest' is set
            if (setUserApiKeyRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'setUserApiKeyRequest' when calling UserApi->SetUserApiKey");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setUserApiKeyRequest;

            localVarRequestOptions.Operation = "UserApi.SetUserApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetUserApiKeyResponse>("/api/user/set_api_key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set User Api Key Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetUserApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<SetUserApiKeyResponse> SetUserApiKeyAsync(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<SetUserApiKeyResponse> localVarResponse = await SetUserApiKeyWithHttpInfoAsync(setUserApiKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set User Api Key Set User Api Key  Create a new api key for the auth&#39;ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth&#39;ed user who calls this endpoint.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setUserApiKeyRequest">JSON request payload to create a new user api key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetUserApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<SetUserApiKeyResponse>> SetUserApiKeyWithHttpInfoAsync(SetUserApiKeyRequest setUserApiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setUserApiKeyRequest' is set
            if (setUserApiKeyRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'setUserApiKeyRequest' when calling UserApi->SetUserApiKey");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setUserApiKeyRequest;

            localVarRequestOptions.Operation = "UserApi.SetUserApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetUserApiKeyResponse>("/api/user/set_api_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SlimUser</returns>
        public SlimUser UpdateUser(UpdateUserData updateUserData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<SlimUser> localVarResponse = UpdateUserWithHttpInfo(updateUserData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SlimUser</returns>
        public trieve_dotnet_client.Client.ApiResponse<SlimUser> UpdateUserWithHttpInfo(UpdateUserData updateUserData, int operationIndex = 0)
        {
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateUserData' when calling UserApi->UpdateUser");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateUserData;

            localVarRequestOptions.Operation = "UserApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SlimUser>("/api/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlimUser</returns>
        public async System.Threading.Tasks.Task<SlimUser> UpdateUserAsync(UpdateUserData updateUserData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<SlimUser> localVarResponse = await UpdateUserWithHttpInfoAsync(updateUserData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Update User  Update a user&#39;s information. If the user_id is not provided, the auth&#39;ed user will be updated. If the user_id is provided, the auth&#39;ed user must be an admin (1) or owner (2) of the organization.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserData">JSON request payload to update user information for the auth&#39;ed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlimUser)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<SlimUser>> UpdateUserWithHttpInfoAsync(UpdateUserData updateUserData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateUserData' when calling UserApi->UpdateUser");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateUserData;

            localVarRequestOptions.Operation = "UserApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SlimUser>("/api/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
