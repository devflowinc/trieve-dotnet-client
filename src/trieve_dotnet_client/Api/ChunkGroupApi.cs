/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChunkGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Chunk to Group
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group  Route to add a chunk to a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddChunkToGroup(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0);

        /// <summary>
        /// Add Chunk to Group
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group  Route to add a chunk to a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddChunkToGroupWithHttpInfo(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0);
        /// <summary>
        /// Add Chunk to Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddChunkToGroupByTrackingId(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0);

        /// <summary>
        /// Add Chunk to Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddChunkToGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0);
        /// <summary>
        /// Create Chunk Group
        /// </summary>
        /// <remarks>
        /// Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        ChunkGroup CreateChunkGroup(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0);

        /// <summary>
        /// Create Chunk Group
        /// </summary>
        /// <remarks>
        /// Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        ApiResponse<ChunkGroup> CreateChunkGroupWithHttpInfo(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0);
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteChunkGroup(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0);

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChunkGroupWithHttpInfo(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0);
        /// <summary>
        /// Delete Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteGroupByTrackingId(string tRDataset, string trackingId, int operationIndex = 0);

        /// <summary>
        /// Delete Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, int operationIndex = 0);
        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Get Group  Fetch the group with the given id. get_group
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        ChunkGroup GetChunkGroup(string tRDataset, Guid groupId, int operationIndex = 0);

        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Get Group  Fetch the group with the given id. get_group
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        ApiResponse<ChunkGroup> GetChunkGroupWithHttpInfo(string tRDataset, Guid groupId, int operationIndex = 0);
        /// <summary>
        /// Get Chunks in Group
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkData</returns>
        BookmarkData GetChunksInGroup(string tRDataset, Guid groupId, long? page, int operationIndex = 0);

        /// <summary>
        /// Get Chunks in Group
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkData</returns>
        ApiResponse<BookmarkData> GetChunksInGroupWithHttpInfo(string tRDataset, Guid groupId, long? page, int operationIndex = 0);
        /// <summary>
        /// Get Chunks in Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkData</returns>
        BookmarkData GetChunksInGroupByTrackingId(string tRDataset, string groupTrackingId, long page, int operationIndex = 0);

        /// <summary>
        /// Get Chunks in Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkData</returns>
        ApiResponse<BookmarkData> GetChunksInGroupByTrackingIdWithHttpInfo(string tRDataset, string groupTrackingId, long page, int operationIndex = 0);
        /// <summary>
        /// Get Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        ChunkGroup GetGroupByTrackingId(string tRDataset, string trackingId, int operationIndex = 0);

        /// <summary>
        /// Get Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        ApiResponse<ChunkGroup> GetGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, int operationIndex = 0);
        /// <summary>
        /// Get Groups for Chunks
        /// </summary>
        /// <remarks>
        /// Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BookmarkGroupResult&gt;</returns>
        List<BookmarkGroupResult> GetGroupsChunkIsIn(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0);

        /// <summary>
        /// Get Groups for Chunks
        /// </summary>
        /// <remarks>
        /// Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BookmarkGroupResult&gt;</returns>
        ApiResponse<List<BookmarkGroupResult>> GetGroupsChunkIsInWithHttpInfo(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0);
        /// <summary>
        /// Get Recommended Groups
        /// </summary>
        /// <remarks>
        /// Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupScoreChunkDTO&gt;</returns>
        List<GroupScoreChunkDTO> GetRecommendedGroups(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0);

        /// <summary>
        /// Get Recommended Groups
        /// </summary>
        /// <remarks>
        /// Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupScoreChunkDTO&gt;</returns>
        ApiResponse<List<GroupScoreChunkDTO>> GetRecommendedGroupsWithHttpInfo(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0);
        /// <summary>
        /// Get Groups for Dataset
        /// </summary>
        /// <remarks>
        /// Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupData</returns>
        GroupData GetSpecificDatasetChunkGroups(string tRDataset, Guid datasetId, long page, int operationIndex = 0);

        /// <summary>
        /// Get Groups for Dataset
        /// </summary>
        /// <remarks>
        /// Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupData</returns>
        ApiResponse<GroupData> GetSpecificDatasetChunkGroupsWithHttpInfo(string tRDataset, Guid datasetId, long page, int operationIndex = 0);
        /// <summary>
        /// Remove Chunk from Group
        /// </summary>
        /// <remarks>
        /// Remove Chunk from Group  Route to remove a chunk from a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveChunkFromGroup(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0);

        /// <summary>
        /// Remove Chunk from Group
        /// </summary>
        /// <remarks>
        /// Remove Chunk from Group  Route to remove a chunk from a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChunkFromGroupWithHttpInfo(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0);
        /// <summary>
        /// Search Over Groups
        /// </summary>
        /// <remarks>
        /// Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchOverGroupsResponseBody</returns>
        SearchOverGroupsResponseBody SearchOverGroups(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0);

        /// <summary>
        /// Search Over Groups
        /// </summary>
        /// <remarks>
        /// Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchOverGroupsResponseBody</returns>
        ApiResponse<SearchOverGroupsResponseBody> SearchOverGroupsWithHttpInfo(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0);
        /// <summary>
        /// Search Within Group
        /// </summary>
        /// <remarks>
        /// Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroupsResult</returns>
        SearchGroupsResult SearchWithinGroup(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0);

        /// <summary>
        /// Search Within Group
        /// </summary>
        /// <remarks>
        /// Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroupsResult</returns>
        ApiResponse<SearchGroupsResult> SearchWithinGroupWithHttpInfo(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0);
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateChunkGroup(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0);

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChunkGroupWithHttpInfo(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0);
        /// <summary>
        /// Update Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateGroupByTrackingId(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0);

        /// <summary>
        /// Update Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupByTrackingIdWithHttpInfo(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChunkGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Chunk to Group
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group  Route to add a chunk to a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddChunkToGroupAsync(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Chunk to Group
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group  Route to add a chunk to a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChunkToGroupWithHttpInfoAsync(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Chunk to Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddChunkToGroupByTrackingIdAsync(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Chunk to Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChunkToGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Chunk Group
        /// </summary>
        /// <remarks>
        /// Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        System.Threading.Tasks.Task<ChunkGroup> CreateChunkGroupAsync(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Chunk Group
        /// </summary>
        /// <remarks>
        /// Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunkGroup>> CreateChunkGroupWithHttpInfoAsync(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChunkGroupAsync(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChunkGroupWithHttpInfoAsync(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupByTrackingIdAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Get Group  Fetch the group with the given id. get_group
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        System.Threading.Tasks.Task<ChunkGroup> GetChunkGroupAsync(string tRDataset, Guid groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Get Group  Fetch the group with the given id. get_group
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunkGroup>> GetChunkGroupWithHttpInfoAsync(string tRDataset, Guid groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Chunks in Group
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkData</returns>
        System.Threading.Tasks.Task<BookmarkData> GetChunksInGroupAsync(string tRDataset, Guid groupId, long? page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Chunks in Group
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkData>> GetChunksInGroupWithHttpInfoAsync(string tRDataset, Guid groupId, long? page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Chunks in Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkData</returns>
        System.Threading.Tasks.Task<BookmarkData> GetChunksInGroupByTrackingIdAsync(string tRDataset, string groupTrackingId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Chunks in Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookmarkData>> GetChunksInGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string groupTrackingId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        System.Threading.Tasks.Task<ChunkGroup> GetGroupByTrackingIdAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunkGroup>> GetGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Groups for Chunks
        /// </summary>
        /// <remarks>
        /// Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookmarkGroupResult&gt;</returns>
        System.Threading.Tasks.Task<List<BookmarkGroupResult>> GetGroupsChunkIsInAsync(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Groups for Chunks
        /// </summary>
        /// <remarks>
        /// Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BookmarkGroupResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BookmarkGroupResult>>> GetGroupsChunkIsInWithHttpInfoAsync(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recommended Groups
        /// </summary>
        /// <remarks>
        /// Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupScoreChunkDTO&gt;</returns>
        System.Threading.Tasks.Task<List<GroupScoreChunkDTO>> GetRecommendedGroupsAsync(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recommended Groups
        /// </summary>
        /// <remarks>
        /// Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupScoreChunkDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupScoreChunkDTO>>> GetRecommendedGroupsWithHttpInfoAsync(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Groups for Dataset
        /// </summary>
        /// <remarks>
        /// Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupData</returns>
        System.Threading.Tasks.Task<GroupData> GetSpecificDatasetChunkGroupsAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Groups for Dataset
        /// </summary>
        /// <remarks>
        /// Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupData>> GetSpecificDatasetChunkGroupsWithHttpInfoAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Chunk from Group
        /// </summary>
        /// <remarks>
        /// Remove Chunk from Group  Route to remove a chunk from a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChunkFromGroupAsync(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Chunk from Group
        /// </summary>
        /// <remarks>
        /// Remove Chunk from Group  Route to remove a chunk from a group.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChunkFromGroupWithHttpInfoAsync(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Over Groups
        /// </summary>
        /// <remarks>
        /// Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchOverGroupsResponseBody</returns>
        System.Threading.Tasks.Task<SearchOverGroupsResponseBody> SearchOverGroupsAsync(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Over Groups
        /// </summary>
        /// <remarks>
        /// Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchOverGroupsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchOverGroupsResponseBody>> SearchOverGroupsWithHttpInfoAsync(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Within Group
        /// </summary>
        /// <remarks>
        /// Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroupsResult</returns>
        System.Threading.Tasks.Task<SearchGroupsResult> SearchWithinGroupAsync(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Within Group
        /// </summary>
        /// <remarks>
        /// Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroupsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGroupsResult>> SearchWithinGroupWithHttpInfoAsync(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChunkGroupAsync(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group
        /// </summary>
        /// <remarks>
        /// Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChunkGroupWithHttpInfoAsync(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupByTrackingIdAsync(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group by Tracking ID
        /// </summary>
        /// <remarks>
        /// Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupByTrackingIdWithHttpInfoAsync(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChunkGroupApi : IChunkGroupApiSync, IChunkGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChunkGroupApi : IChunkGroupApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkGroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChunkGroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkGroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChunkGroupApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkGroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChunkGroupApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChunkGroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChunkGroupApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Chunk to Group Add Chunk to Group  Route to add a chunk to a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddChunkToGroup(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0)
        {
            AddChunkToGroupWithHttpInfo(tRDataset, groupId, addChunkToGroupData);
        }

        /// <summary>
        /// Add Chunk to Group Add Chunk to Group  Route to add a chunk to a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> AddChunkToGroupWithHttpInfo(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->AddChunkToGroup");
            }

            // verify the required parameter 'addChunkToGroupData' is set
            if (addChunkToGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'addChunkToGroupData' when calling ChunkGroupApi->AddChunkToGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = addChunkToGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.AddChunkToGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chunk_group/chunk/{group_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChunkToGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Chunk to Group Add Chunk to Group  Route to add a chunk to a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddChunkToGroupAsync(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddChunkToGroupWithHttpInfoAsync(tRDataset, groupId, addChunkToGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Chunk to Group Add Chunk to Group  Route to add a chunk to a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> AddChunkToGroupWithHttpInfoAsync(string tRDataset, Guid groupId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->AddChunkToGroup");
            }

            // verify the required parameter 'addChunkToGroupData' is set
            if (addChunkToGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'addChunkToGroupData' when calling ChunkGroupApi->AddChunkToGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = addChunkToGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.AddChunkToGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chunk_group/chunk/{group_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChunkToGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Chunk to Group by Tracking ID Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddChunkToGroupByTrackingId(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0)
        {
            AddChunkToGroupByTrackingIdWithHttpInfo(tRDataset, trackingId, addChunkToGroupData);
        }

        /// <summary>
        /// Add Chunk to Group by Tracking ID Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> AddChunkToGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }

            // verify the required parameter 'addChunkToGroupData' is set
            if (addChunkToGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'addChunkToGroupData' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = addChunkToGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.AddChunkToGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChunkToGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Chunk to Group by Tracking ID Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddChunkToGroupByTrackingIdAsync(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddChunkToGroupByTrackingIdWithHttpInfoAsync(tRDataset, trackingId, addChunkToGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Chunk to Group by Tracking ID Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Id of the group to add the chunk to as a bookmark</param>
        /// <param name="addChunkToGroupData">JSON request payload to add a chunk to a group (bookmark it)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> AddChunkToGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, AddChunkToGroupData addChunkToGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }

            // verify the required parameter 'addChunkToGroupData' is set
            if (addChunkToGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'addChunkToGroupData' when calling ChunkGroupApi->AddChunkToGroupByTrackingId");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = addChunkToGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.AddChunkToGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChunkToGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Chunk Group Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        public ChunkGroup CreateChunkGroup(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = CreateChunkGroupWithHttpInfo(tRDataset, createChunkGroupData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chunk Group Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        public trieve_dotnet_client.Client.ApiResponse<ChunkGroup> CreateChunkGroupWithHttpInfo(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->CreateChunkGroup");
            }

            // verify the required parameter 'createChunkGroupData' is set
            if (createChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createChunkGroupData' when calling ChunkGroupApi->CreateChunkGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.CreateChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChunkGroup>("/api/chunk_group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Chunk Group Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        public async System.Threading.Tasks.Task<ChunkGroup> CreateChunkGroupAsync(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = await CreateChunkGroupWithHttpInfoAsync(tRDataset, createChunkGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chunk Group Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<ChunkGroup>> CreateChunkGroupWithHttpInfoAsync(string tRDataset, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->CreateChunkGroup");
            }

            // verify the required parameter 'createChunkGroupData' is set
            if (createChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createChunkGroupData' when calling ChunkGroupApi->CreateChunkGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.CreateChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChunkGroup>("/api/chunk_group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteChunkGroup(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0)
        {
            DeleteChunkGroupWithHttpInfo(tRDataset, groupId, deleteChunks);
        }

        /// <summary>
        /// Delete Group Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DeleteChunkGroupWithHttpInfo(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->DeleteChunkGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(trieve_dotnet_client.Client.ClientUtils.ParameterToMultiMap("", "delete_chunks", deleteChunks));
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.DeleteChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chunk_group/{group_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChunkGroupAsync(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteChunkGroupWithHttpInfoAsync(tRDataset, groupId, deleteChunks, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Group Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="deleteChunks">Delete the chunks within the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DeleteChunkGroupWithHttpInfoAsync(string tRDataset, Guid groupId, bool deleteChunks, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->DeleteChunkGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(trieve_dotnet_client.Client.ClientUtils.ParameterToMultiMap("", "delete_chunks", deleteChunks));
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.DeleteChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chunk_group/{group_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group by Tracking ID Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteGroupByTrackingId(string tRDataset, string trackingId, int operationIndex = 0)
        {
            DeleteGroupByTrackingIdWithHttpInfo(tRDataset, trackingId);
        }

        /// <summary>
        /// Delete Group by Tracking ID Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DeleteGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->DeleteGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->DeleteGroupByTrackingId");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.DeleteGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group by Tracking ID Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupByTrackingIdAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupByTrackingIdWithHttpInfoAsync(tRDataset, trackingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Group by Tracking ID Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DeleteGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->DeleteGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->DeleteGroupByTrackingId");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.DeleteGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Get Group  Fetch the group with the given id. get_group
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        public ChunkGroup GetChunkGroup(string tRDataset, Guid groupId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = GetChunkGroupWithHttpInfo(tRDataset, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Get Group  Fetch the group with the given id. get_group
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        public trieve_dotnet_client.Client.ApiResponse<ChunkGroup> GetChunkGroupWithHttpInfo(string tRDataset, Guid groupId, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunkGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChunkGroup>("/api/chunk_group/{group_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Get Group  Fetch the group with the given id. get_group
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        public async System.Threading.Tasks.Task<ChunkGroup> GetChunkGroupAsync(string tRDataset, Guid groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = await GetChunkGroupWithHttpInfoAsync(tRDataset, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Get Group  Fetch the group with the given id. get_group
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<ChunkGroup>> GetChunkGroupWithHttpInfoAsync(string tRDataset, Guid groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunkGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChunkGroup>("/api/chunk_group/{group_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunks in Group Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkData</returns>
        public BookmarkData GetChunksInGroup(string tRDataset, Guid groupId, long? page, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<BookmarkData> localVarResponse = GetChunksInGroupWithHttpInfo(tRDataset, groupId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunks in Group Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkData</returns>
        public trieve_dotnet_client.Client.ApiResponse<BookmarkData> GetChunksInGroupWithHttpInfo(string tRDataset, Guid groupId, long? page, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunksInGroup");
            }

            // verify the required parameter 'page' is set
            if (page == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'page' when calling ChunkGroupApi->GetChunksInGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunksInGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BookmarkData>("/api/chunk_group/{group_id}/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunksInGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunks in Group Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkData</returns>
        public async System.Threading.Tasks.Task<BookmarkData> GetChunksInGroupAsync(string tRDataset, Guid groupId, long? page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<BookmarkData> localVarResponse = await GetChunksInGroupWithHttpInfoAsync(tRDataset, groupId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunks in Group Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group you want to fetch.</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkData)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<BookmarkData>> GetChunksInGroupWithHttpInfoAsync(string tRDataset, Guid groupId, long? page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunksInGroup");
            }

            // verify the required parameter 'page' is set
            if (page == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'page' when calling ChunkGroupApi->GetChunksInGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunksInGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BookmarkData>("/api/chunk_group/{group_id}/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunksInGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunks in Group by Tracking ID Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BookmarkData</returns>
        public BookmarkData GetChunksInGroupByTrackingId(string tRDataset, string groupTrackingId, long page, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<BookmarkData> localVarResponse = GetChunksInGroupByTrackingIdWithHttpInfo(tRDataset, groupTrackingId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunks in Group by Tracking ID Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BookmarkData</returns>
        public trieve_dotnet_client.Client.ApiResponse<BookmarkData> GetChunksInGroupByTrackingIdWithHttpInfo(string tRDataset, string groupTrackingId, long page, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunksInGroupByTrackingId");
            }

            // verify the required parameter 'groupTrackingId' is set
            if (groupTrackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'groupTrackingId' when calling ChunkGroupApi->GetChunksInGroupByTrackingId");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupTrackingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunksInGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BookmarkData>("/api/chunk_group/tracking_id/{group_tracking_id}/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunksInGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Chunks in Group by Tracking ID Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BookmarkData</returns>
        public async System.Threading.Tasks.Task<BookmarkData> GetChunksInGroupByTrackingIdAsync(string tRDataset, string groupTrackingId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<BookmarkData> localVarResponse = await GetChunksInGroupByTrackingIdWithHttpInfoAsync(tRDataset, groupTrackingId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chunks in Group by Tracking ID Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupTrackingId">The id of the group to get the chunks from</param>
        /// <param name="page">The page of chunks to get from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BookmarkData)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<BookmarkData>> GetChunksInGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string groupTrackingId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetChunksInGroupByTrackingId");
            }

            // verify the required parameter 'groupTrackingId' is set
            if (groupTrackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'groupTrackingId' when calling ChunkGroupApi->GetChunksInGroupByTrackingId");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupTrackingId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetChunksInGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BookmarkData>("/api/chunk_group/tracking_id/{group_tracking_id}/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChunksInGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group by Tracking ID Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChunkGroup</returns>
        public ChunkGroup GetGroupByTrackingId(string tRDataset, string trackingId, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = GetGroupByTrackingIdWithHttpInfo(tRDataset, trackingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group by Tracking ID Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChunkGroup</returns>
        public trieve_dotnet_client.Client.ApiResponse<ChunkGroup> GetGroupByTrackingIdWithHttpInfo(string tRDataset, string trackingId, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->GetGroupByTrackingId");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChunkGroup>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group by Tracking ID Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChunkGroup</returns>
        public async System.Threading.Tasks.Task<ChunkGroup> GetGroupByTrackingIdAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<ChunkGroup> localVarResponse = await GetGroupByTrackingIdWithHttpInfoAsync(tRDataset, trackingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group by Tracking ID Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">The tracking id of the group to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChunkGroup)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<ChunkGroup>> GetGroupByTrackingIdWithHttpInfoAsync(string tRDataset, string trackingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetGroupByTrackingId");
            }

            // verify the required parameter 'trackingId' is set
            if (trackingId == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'trackingId' when calling ChunkGroupApi->GetGroupByTrackingId");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChunkGroup>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Groups for Chunks Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BookmarkGroupResult&gt;</returns>
        public List<BookmarkGroupResult> GetGroupsChunkIsIn(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<BookmarkGroupResult>> localVarResponse = GetGroupsChunkIsInWithHttpInfo(tRDataset, getGroupsForChunksData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Groups for Chunks Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BookmarkGroupResult&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<BookmarkGroupResult>> GetGroupsChunkIsInWithHttpInfo(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetGroupsChunkIsIn");
            }

            // verify the required parameter 'getGroupsForChunksData' is set
            if (getGroupsForChunksData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'getGroupsForChunksData' when calling ChunkGroupApi->GetGroupsChunkIsIn");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = getGroupsForChunksData;

            localVarRequestOptions.Operation = "ChunkGroupApi.GetGroupsChunkIsIn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BookmarkGroupResult>>("/api/chunk_group/chunks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsChunkIsIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Groups for Chunks Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BookmarkGroupResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<BookmarkGroupResult>> GetGroupsChunkIsInAsync(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<BookmarkGroupResult>> localVarResponse = await GetGroupsChunkIsInWithHttpInfoAsync(tRDataset, getGroupsForChunksData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Groups for Chunks Get Groups for Chunks  Route to get the groups that a chunk is in.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="getGroupsForChunksData">JSON request payload to get the groups that a chunk is in</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BookmarkGroupResult&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<BookmarkGroupResult>>> GetGroupsChunkIsInWithHttpInfoAsync(string tRDataset, GetGroupsForChunksData getGroupsForChunksData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetGroupsChunkIsIn");
            }

            // verify the required parameter 'getGroupsForChunksData' is set
            if (getGroupsForChunksData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'getGroupsForChunksData' when calling ChunkGroupApi->GetGroupsChunkIsIn");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = getGroupsForChunksData;

            localVarRequestOptions.Operation = "ChunkGroupApi.GetGroupsChunkIsIn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BookmarkGroupResult>>("/api/chunk_group/chunks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsChunkIsIn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recommended Groups Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupScoreChunkDTO&gt;</returns>
        public List<GroupScoreChunkDTO> GetRecommendedGroups(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<GroupScoreChunkDTO>> localVarResponse = GetRecommendedGroupsWithHttpInfo(tRDataset, reccomendGroupChunksRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recommended Groups Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupScoreChunkDTO&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<GroupScoreChunkDTO>> GetRecommendedGroupsWithHttpInfo(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetRecommendedGroups");
            }

            // verify the required parameter 'reccomendGroupChunksRequest' is set
            if (reccomendGroupChunksRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'reccomendGroupChunksRequest' when calling ChunkGroupApi->GetRecommendedGroups");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = reccomendGroupChunksRequest;

            localVarRequestOptions.Operation = "ChunkGroupApi.GetRecommendedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<GroupScoreChunkDTO>>("/api/chunk_group/recommend", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recommended Groups Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupScoreChunkDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupScoreChunkDTO>> GetRecommendedGroupsAsync(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<GroupScoreChunkDTO>> localVarResponse = await GetRecommendedGroupsWithHttpInfoAsync(tRDataset, reccomendGroupChunksRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recommended Groups Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="reccomendGroupChunksRequest">JSON request payload to get recommendations of chunks similar to the chunks in the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupScoreChunkDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<GroupScoreChunkDTO>>> GetRecommendedGroupsWithHttpInfoAsync(string tRDataset, ReccomendGroupChunksRequest reccomendGroupChunksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetRecommendedGroups");
            }

            // verify the required parameter 'reccomendGroupChunksRequest' is set
            if (reccomendGroupChunksRequest == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'reccomendGroupChunksRequest' when calling ChunkGroupApi->GetRecommendedGroups");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = reccomendGroupChunksRequest;

            localVarRequestOptions.Operation = "ChunkGroupApi.GetRecommendedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<GroupScoreChunkDTO>>("/api/chunk_group/recommend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Groups for Dataset Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupData</returns>
        public GroupData GetSpecificDatasetChunkGroups(string tRDataset, Guid datasetId, long page, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<GroupData> localVarResponse = GetSpecificDatasetChunkGroupsWithHttpInfo(tRDataset, datasetId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Groups for Dataset Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupData</returns>
        public trieve_dotnet_client.Client.ApiResponse<GroupData> GetSpecificDatasetChunkGroupsWithHttpInfo(string tRDataset, Guid datasetId, long page, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetSpecificDatasetChunkGroups");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetSpecificDatasetChunkGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupData>("/api/dataset/groups/{dataset_id}/{page}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpecificDatasetChunkGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Groups for Dataset Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupData</returns>
        public async System.Threading.Tasks.Task<GroupData> GetSpecificDatasetChunkGroupsAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<GroupData> localVarResponse = await GetSpecificDatasetChunkGroupsWithHttpInfoAsync(tRDataset, datasetId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Groups for Dataset Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="datasetId">The id of the dataset to fetch groups for.</param>
        /// <param name="page">The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupData)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<GroupData>> GetSpecificDatasetChunkGroupsWithHttpInfoAsync(string tRDataset, Guid datasetId, long page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->GetSpecificDatasetChunkGroups");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dataset_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(datasetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", trieve_dotnet_client.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "ChunkGroupApi.GetSpecificDatasetChunkGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupData>("/api/dataset/groups/{dataset_id}/{page}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpecificDatasetChunkGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Chunk from Group Remove Chunk from Group  Route to remove a chunk from a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveChunkFromGroup(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0)
        {
            RemoveChunkFromGroupWithHttpInfo(tRDataset, groupId, createChunkGroupData);
        }

        /// <summary>
        /// Remove Chunk from Group Remove Chunk from Group  Route to remove a chunk from a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> RemoveChunkFromGroupWithHttpInfo(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->RemoveChunkFromGroup");
            }

            // verify the required parameter 'createChunkGroupData' is set
            if (createChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createChunkGroupData' when calling ChunkGroupApi->RemoveChunkFromGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.RemoveChunkFromGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/chunk_group/chunk/{group_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChunkFromGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Chunk from Group Remove Chunk from Group  Route to remove a chunk from a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChunkFromGroupAsync(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveChunkFromGroupWithHttpInfoAsync(tRDataset, groupId, createChunkGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Chunk from Group Remove Chunk from Group  Route to remove a chunk from a group.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="groupId">Id of the group to remove the bookmark&#39;ed chunk from</param>
        /// <param name="createChunkGroupData">JSON request payload to cretea a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> RemoveChunkFromGroupWithHttpInfoAsync(string tRDataset, Guid groupId, CreateChunkGroupData createChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->RemoveChunkFromGroup");
            }

            // verify the required parameter 'createChunkGroupData' is set
            if (createChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createChunkGroupData' when calling ChunkGroupApi->RemoveChunkFromGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.RemoveChunkFromGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/chunk_group/chunk/{group_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChunkFromGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Over Groups Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchOverGroupsResponseBody</returns>
        public SearchOverGroupsResponseBody SearchOverGroups(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<SearchOverGroupsResponseBody> localVarResponse = SearchOverGroupsWithHttpInfo(searchOverGroupsData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Over Groups Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchOverGroupsResponseBody</returns>
        public trieve_dotnet_client.Client.ApiResponse<SearchOverGroupsResponseBody> SearchOverGroupsWithHttpInfo(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0)
        {
            // verify the required parameter 'searchOverGroupsData' is set
            if (searchOverGroupsData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'searchOverGroupsData' when calling ChunkGroupApi->SearchOverGroups");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchOverGroupsData;

            localVarRequestOptions.Operation = "ChunkGroupApi.SearchOverGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchOverGroupsResponseBody>("/api/chunk_group/group_oriented_search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchOverGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Over Groups Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchOverGroupsResponseBody</returns>
        public async System.Threading.Tasks.Task<SearchOverGroupsResponseBody> SearchOverGroupsAsync(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<SearchOverGroupsResponseBody> localVarResponse = await SearchOverGroupsWithHttpInfoAsync(searchOverGroupsData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Over Groups Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchOverGroupsData">JSON request payload to semantically search over groups</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchOverGroupsResponseBody)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<SearchOverGroupsResponseBody>> SearchOverGroupsWithHttpInfoAsync(SearchOverGroupsData searchOverGroupsData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchOverGroupsData' is set
            if (searchOverGroupsData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'searchOverGroupsData' when calling ChunkGroupApi->SearchOverGroups");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchOverGroupsData;

            localVarRequestOptions.Operation = "ChunkGroupApi.SearchOverGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchOverGroupsResponseBody>("/api/chunk_group/group_oriented_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchOverGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Within Group Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroupsResult</returns>
        public SearchGroupsResult SearchWithinGroup(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<SearchGroupsResult> localVarResponse = SearchWithinGroupWithHttpInfo(tRDataset, searchWithinGroupData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Within Group Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroupsResult</returns>
        public trieve_dotnet_client.Client.ApiResponse<SearchGroupsResult> SearchWithinGroupWithHttpInfo(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->SearchWithinGroup");
            }

            // verify the required parameter 'searchWithinGroupData' is set
            if (searchWithinGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'searchWithinGroupData' when calling ChunkGroupApi->SearchWithinGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = searchWithinGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.SearchWithinGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchGroupsResult>("/api/chunk_group/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWithinGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Within Group Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroupsResult</returns>
        public async System.Threading.Tasks.Task<SearchGroupsResult> SearchWithinGroupAsync(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<SearchGroupsResult> localVarResponse = await SearchWithinGroupWithHttpInfoAsync(tRDataset, searchWithinGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Within Group Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="searchWithinGroupData">JSON request payload to semantically search a group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroupsResult)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<SearchGroupsResult>> SearchWithinGroupWithHttpInfoAsync(string tRDataset, SearchWithinGroupData searchWithinGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->SearchWithinGroup");
            }

            // verify the required parameter 'searchWithinGroupData' is set
            if (searchWithinGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'searchWithinGroupData' when calling ChunkGroupApi->SearchWithinGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = searchWithinGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.SearchWithinGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchGroupsResult>("/api/chunk_group/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchWithinGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateChunkGroup(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0)
        {
            UpdateChunkGroupWithHttpInfo(tRDataset, updateChunkGroupData);
        }

        /// <summary>
        /// Update Group Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> UpdateChunkGroupWithHttpInfo(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->UpdateChunkGroup");
            }

            // verify the required parameter 'updateChunkGroupData' is set
            if (updateChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateChunkGroupData' when calling ChunkGroupApi->UpdateChunkGroup");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.UpdateChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/chunk_group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChunkGroupAsync(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateChunkGroupWithHttpInfoAsync(tRDataset, updateChunkGroupData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Group Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateChunkGroupData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> UpdateChunkGroupWithHttpInfoAsync(string tRDataset, UpdateChunkGroupData updateChunkGroupData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->UpdateChunkGroup");
            }

            // verify the required parameter 'updateChunkGroupData' is set
            if (updateChunkGroupData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateChunkGroupData' when calling ChunkGroupApi->UpdateChunkGroup");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateChunkGroupData;

            localVarRequestOptions.Operation = "ChunkGroupApi.UpdateChunkGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/chunk_group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateChunkGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group by Tracking ID Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateGroupByTrackingId(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0)
        {
            UpdateGroupByTrackingIdWithHttpInfo(tRDataset, trackingId, updateGroupByTrackingIDData);
        }

        /// <summary>
        /// Update Group by Tracking ID Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> UpdateGroupByTrackingIdWithHttpInfo(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->UpdateGroupByTrackingId");
            }

            // verify the required parameter 'updateGroupByTrackingIDData' is set
            if (updateGroupByTrackingIDData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateGroupByTrackingIDData' when calling ChunkGroupApi->UpdateGroupByTrackingId");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateGroupByTrackingIDData;

            localVarRequestOptions.Operation = "ChunkGroupApi.UpdateGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group by Tracking ID Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupByTrackingIdAsync(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateGroupByTrackingIdWithHttpInfoAsync(tRDataset, trackingId, updateGroupByTrackingIDData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Group by Tracking ID Update Group by Tracking ID  Update a chunk_group with the given tracking id.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="trackingId">Tracking id of the chunk_group to update</param>
        /// <param name="updateGroupByTrackingIDData">JSON request payload to update a chunkGroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> UpdateGroupByTrackingIdWithHttpInfoAsync(string tRDataset, Guid trackingId, UpdateGroupByTrackingIDData updateGroupByTrackingIDData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling ChunkGroupApi->UpdateGroupByTrackingId");
            }

            // verify the required parameter 'updateGroupByTrackingIDData' is set
            if (updateGroupByTrackingIDData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateGroupByTrackingIDData' when calling ChunkGroupApi->UpdateGroupByTrackingId");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tracking_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(trackingId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateGroupByTrackingIDData;

            localVarRequestOptions.Operation = "ChunkGroupApi.UpdateGroupByTrackingId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/chunk_group/tracking_id/{tracking_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupByTrackingId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
