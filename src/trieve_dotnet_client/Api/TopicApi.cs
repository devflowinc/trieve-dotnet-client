/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using trieve_dotnet_client.Client;
using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Topic
        /// </summary>
        /// <remarks>
        /// Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Topic</returns>
        Topic CreateTopic(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0);

        /// <summary>
        /// Create Topic
        /// </summary>
        /// <remarks>
        /// Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Topic</returns>
        ApiResponse<Topic> CreateTopicWithHttpInfo(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0);
        /// <summary>
        /// Delete Topic
        /// </summary>
        /// <remarks>
        /// Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTopic(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0);

        /// <summary>
        /// Delete Topic
        /// </summary>
        /// <remarks>
        /// Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTopicWithHttpInfo(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0);
        /// <summary>
        /// Get All Topics for User
        /// </summary>
        /// <remarks>
        /// Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Topic&gt;</returns>
        List<Topic> GetAllTopicsForUser(Guid userId, string tRDataset, int operationIndex = 0);

        /// <summary>
        /// Get All Topics for User
        /// </summary>
        /// <remarks>
        /// Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Topic&gt;</returns>
        ApiResponse<List<Topic>> GetAllTopicsForUserWithHttpInfo(Guid userId, string tRDataset, int operationIndex = 0);
        /// <summary>
        /// Update Topic
        /// </summary>
        /// <remarks>
        /// Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTopic(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0);

        /// <summary>
        /// Update Topic
        /// </summary>
        /// <remarks>
        /// Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTopicWithHttpInfo(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Topic
        /// </summary>
        /// <remarks>
        /// Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Topic</returns>
        System.Threading.Tasks.Task<Topic> CreateTopicAsync(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Topic
        /// </summary>
        /// <remarks>
        /// Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Topic)</returns>
        System.Threading.Tasks.Task<ApiResponse<Topic>> CreateTopicWithHttpInfoAsync(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Topic
        /// </summary>
        /// <remarks>
        /// Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTopicAsync(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Topic
        /// </summary>
        /// <remarks>
        /// Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTopicWithHttpInfoAsync(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Topics for User
        /// </summary>
        /// <remarks>
        /// Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Topic&gt;</returns>
        System.Threading.Tasks.Task<List<Topic>> GetAllTopicsForUserAsync(Guid userId, string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Topics for User
        /// </summary>
        /// <remarks>
        /// Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Topic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Topic>>> GetAllTopicsForUserWithHttpInfoAsync(Guid userId, string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Topic
        /// </summary>
        /// <remarks>
        /// Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTopicAsync(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Topic
        /// </summary>
        /// <remarks>
        /// Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </remarks>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTopicWithHttpInfoAsync(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITopicApi : ITopicApiSync, ITopicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TopicApi : ITopicApi
    {
        private trieve_dotnet_client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TopicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TopicApi(string basePath)
        {
            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                new trieve_dotnet_client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TopicApi(trieve_dotnet_client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = trieve_dotnet_client.Client.Configuration.MergeConfigurations(
                trieve_dotnet_client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new trieve_dotnet_client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TopicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TopicApi(trieve_dotnet_client.Client.ISynchronousClient client, trieve_dotnet_client.Client.IAsynchronousClient asyncClient, trieve_dotnet_client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = trieve_dotnet_client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public trieve_dotnet_client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public trieve_dotnet_client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public trieve_dotnet_client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public trieve_dotnet_client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Topic Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Topic</returns>
        public Topic CreateTopic(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<Topic> localVarResponse = CreateTopicWithHttpInfo(tRDataset, createTopicData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Topic Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Topic</returns>
        public trieve_dotnet_client.Client.ApiResponse<Topic> CreateTopicWithHttpInfo(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->CreateTopic");
            }

            // verify the required parameter 'createTopicData' is set
            if (createTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createTopicData' when calling TopicApi->CreateTopic");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createTopicData;

            localVarRequestOptions.Operation = "TopicApi.CreateTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Topic>("/api/topic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Topic Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Topic</returns>
        public async System.Threading.Tasks.Task<Topic> CreateTopicAsync(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<Topic> localVarResponse = await CreateTopicWithHttpInfoAsync(tRDataset, createTopicData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Topic Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="createTopicData">JSON request payload to create chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Topic)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Topic>> CreateTopicWithHttpInfoAsync(string tRDataset, CreateTopicData createTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->CreateTopic");
            }

            // verify the required parameter 'createTopicData' is set
            if (createTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'createTopicData' when calling TopicApi->CreateTopic");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = createTopicData;

            localVarRequestOptions.Operation = "TopicApi.CreateTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Topic>("/api/topic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Topic Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTopic(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0)
        {
            DeleteTopicWithHttpInfo(tRDataset, deleteTopicData);
        }

        /// <summary>
        /// Delete Topic Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> DeleteTopicWithHttpInfo(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->DeleteTopic");
            }

            // verify the required parameter 'deleteTopicData' is set
            if (deleteTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteTopicData' when calling TopicApi->DeleteTopic");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = deleteTopicData;

            localVarRequestOptions.Operation = "TopicApi.DeleteTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/topic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Topic Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTopicAsync(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTopicWithHttpInfoAsync(tRDataset, deleteTopicData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Topic Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="deleteTopicData">JSON request payload to delete a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> DeleteTopicWithHttpInfoAsync(string tRDataset, DeleteTopicData deleteTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->DeleteTopic");
            }

            // verify the required parameter 'deleteTopicData' is set
            if (deleteTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'deleteTopicData' when calling TopicApi->DeleteTopic");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = deleteTopicData;

            localVarRequestOptions.Operation = "TopicApi.DeleteTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/topic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Topics for User Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Topic&gt;</returns>
        public List<Topic> GetAllTopicsForUser(Guid userId, string tRDataset, int operationIndex = 0)
        {
            trieve_dotnet_client.Client.ApiResponse<List<Topic>> localVarResponse = GetAllTopicsForUserWithHttpInfo(userId, tRDataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Topics for User Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Topic&gt;</returns>
        public trieve_dotnet_client.Client.ApiResponse<List<Topic>> GetAllTopicsForUserWithHttpInfo(Guid userId, string tRDataset, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->GetAllTopicsForUser");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "TopicApi.GetAllTopicsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Topic>>("/api/topic/user/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTopicsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Topics for User Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Topic&gt;</returns>
        public async System.Threading.Tasks.Task<List<Topic>> GetAllTopicsForUserAsync(Guid userId, string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            trieve_dotnet_client.Client.ApiResponse<List<Topic>> localVarResponse = await GetAllTopicsForUserWithHttpInfoAsync(userId, tRDataset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Topics for User Get All Topics for User  Get all topics belonging to a the auth&#39;ed user. Soon, we plan to allow specification of the user for this route and include pagination.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to get topics for</param>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Topic&gt;)</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<List<Topic>>> GetAllTopicsForUserWithHttpInfoAsync(Guid userId, string tRDataset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->GetAllTopicsForUser");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", trieve_dotnet_client.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter

            localVarRequestOptions.Operation = "TopicApi.GetAllTopicsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Topic>>("/api/topic/user/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTopicsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Topic Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTopic(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0)
        {
            UpdateTopicWithHttpInfo(tRDataset, updateTopicData);
        }

        /// <summary>
        /// Update Topic Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public trieve_dotnet_client.Client.ApiResponse<Object> UpdateTopicWithHttpInfo(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0)
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->UpdateTopic");
            }

            // verify the required parameter 'updateTopicData' is set
            if (updateTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateTopicData' when calling TopicApi->UpdateTopic");
            }

            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateTopicData;

            localVarRequestOptions.Operation = "TopicApi.UpdateTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/topic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Topic Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTopicAsync(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTopicWithHttpInfoAsync(tRDataset, updateTopicData, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Topic Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
        /// </summary>
        /// <exception cref="trieve_dotnet_client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tRDataset">The dataset id to use for the request</param>
        /// <param name="updateTopicData">JSON request payload to update a chat topic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<trieve_dotnet_client.Client.ApiResponse<Object>> UpdateTopicWithHttpInfoAsync(string tRDataset, UpdateTopicData updateTopicData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tRDataset' is set
            if (tRDataset == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'tRDataset' when calling TopicApi->UpdateTopic");
            }

            // verify the required parameter 'updateTopicData' is set
            if (updateTopicData == null)
            {
                throw new trieve_dotnet_client.Client.ApiException(400, "Missing required parameter 'updateTopicData' when calling TopicApi->UpdateTopic");
            }


            trieve_dotnet_client.Client.RequestOptions localVarRequestOptions = new trieve_dotnet_client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = trieve_dotnet_client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = trieve_dotnet_client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("TR-Dataset", trieve_dotnet_client.Client.ClientUtils.ParameterToString(tRDataset)); // header parameter
            localVarRequestOptions.Data = updateTopicData;

            localVarRequestOptions.Operation = "TopicApi.UpdateTopic";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/topic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTopic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
