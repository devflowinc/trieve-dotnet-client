/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using trieve_dotnet_client.Client;
using trieve_dotnet_client.Api;
// uncomment below to import models
//using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Test.Api
{
    /// <summary>
    ///  Class for testing TopicApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TopicApiTests : IDisposable
    {
        private TopicApi instance;

        public TopicApiTests()
        {
            instance = new TopicApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TopicApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TopicApi
            //Assert.IsType<TopicApi>(instance);
        }

        /// <summary>
        /// Test CreateTopic
        /// </summary>
        [Fact]
        public void CreateTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //CreateTopicData createTopicData = null;
            //var response = instance.CreateTopic(tRDataset, createTopicData);
            //Assert.IsType<Topic>(response);
        }

        /// <summary>
        /// Test DeleteTopic
        /// </summary>
        [Fact]
        public void DeleteTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //DeleteTopicData deleteTopicData = null;
            //instance.DeleteTopic(tRDataset, deleteTopicData);
        }

        /// <summary>
        /// Test GetAllTopicsForUser
        /// </summary>
        [Fact]
        public void GetAllTopicsForUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid userId = null;
            //string tRDataset = null;
            //var response = instance.GetAllTopicsForUser(userId, tRDataset);
            //Assert.IsType<List<Topic>>(response);
        }

        /// <summary>
        /// Test UpdateTopic
        /// </summary>
        [Fact]
        public void UpdateTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //UpdateTopicData updateTopicData = null;
            //instance.UpdateTopic(tRDataset, updateTopicData);
        }
    }
}
