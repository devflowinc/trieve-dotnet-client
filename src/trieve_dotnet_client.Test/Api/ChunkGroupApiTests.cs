/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using trieve_dotnet_client.Client;
using trieve_dotnet_client.Api;
// uncomment below to import models
//using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Test.Api
{
    /// <summary>
    ///  Class for testing ChunkGroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChunkGroupApiTests : IDisposable
    {
        private ChunkGroupApi instance;

        public ChunkGroupApiTests()
        {
            instance = new ChunkGroupApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChunkGroupApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ChunkGroupApi
            //Assert.IsType<ChunkGroupApi>(instance);
        }

        /// <summary>
        /// Test AddChunkToGroup
        /// </summary>
        [Fact]
        public void AddChunkToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid groupId = null;
            //AddChunkToGroupData addChunkToGroupData = null;
            //instance.AddChunkToGroup(tRDataset, groupId, addChunkToGroupData);
        }

        /// <summary>
        /// Test AddChunkToGroupByTrackingId
        /// </summary>
        [Fact]
        public void AddChunkToGroupByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string trackingId = null;
            //AddChunkToGroupData addChunkToGroupData = null;
            //instance.AddChunkToGroupByTrackingId(tRDataset, trackingId, addChunkToGroupData);
        }

        /// <summary>
        /// Test CreateChunkGroup
        /// </summary>
        [Fact]
        public void CreateChunkGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //CreateChunkGroupData createChunkGroupData = null;
            //var response = instance.CreateChunkGroup(tRDataset, createChunkGroupData);
            //Assert.IsType<ChunkGroup>(response);
        }

        /// <summary>
        /// Test DeleteChunkGroup
        /// </summary>
        [Fact]
        public void DeleteChunkGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid groupId = null;
            //bool deleteChunks = null;
            //instance.DeleteChunkGroup(tRDataset, groupId, deleteChunks);
        }

        /// <summary>
        /// Test DeleteGroupByTrackingId
        /// </summary>
        [Fact]
        public void DeleteGroupByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string trackingId = null;
            //instance.DeleteGroupByTrackingId(tRDataset, trackingId);
        }

        /// <summary>
        /// Test GetChunkGroup
        /// </summary>
        [Fact]
        public void GetChunkGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid groupId = null;
            //var response = instance.GetChunkGroup(tRDataset, groupId);
            //Assert.IsType<ChunkGroup>(response);
        }

        /// <summary>
        /// Test GetChunksInGroup
        /// </summary>
        [Fact]
        public void GetChunksInGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid groupId = null;
            //long? page = null;
            //var response = instance.GetChunksInGroup(tRDataset, groupId, page);
            //Assert.IsType<BookmarkData>(response);
        }

        /// <summary>
        /// Test GetChunksInGroupByTrackingId
        /// </summary>
        [Fact]
        public void GetChunksInGroupByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string groupTrackingId = null;
            //long page = null;
            //var response = instance.GetChunksInGroupByTrackingId(tRDataset, groupTrackingId, page);
            //Assert.IsType<BookmarkData>(response);
        }

        /// <summary>
        /// Test GetGroupByTrackingId
        /// </summary>
        [Fact]
        public void GetGroupByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string trackingId = null;
            //var response = instance.GetGroupByTrackingId(tRDataset, trackingId);
            //Assert.IsType<ChunkGroup>(response);
        }

        /// <summary>
        /// Test GetGroupsChunkIsIn
        /// </summary>
        [Fact]
        public void GetGroupsChunkIsInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //GetGroupsForChunksData getGroupsForChunksData = null;
            //var response = instance.GetGroupsChunkIsIn(tRDataset, getGroupsForChunksData);
            //Assert.IsType<List<BookmarkGroupResult>>(response);
        }

        /// <summary>
        /// Test GetRecommendedGroups
        /// </summary>
        [Fact]
        public void GetRecommendedGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //ReccomendGroupChunksRequest reccomendGroupChunksRequest = null;
            //var response = instance.GetRecommendedGroups(tRDataset, reccomendGroupChunksRequest);
            //Assert.IsType<List<GroupScoreChunkDTO>>(response);
        }

        /// <summary>
        /// Test GetSpecificDatasetChunkGroups
        /// </summary>
        [Fact]
        public void GetSpecificDatasetChunkGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid datasetId = null;
            //long page = null;
            //var response = instance.GetSpecificDatasetChunkGroups(tRDataset, datasetId, page);
            //Assert.IsType<GroupData>(response);
        }

        /// <summary>
        /// Test RemoveChunkFromGroup
        /// </summary>
        [Fact]
        public void RemoveChunkFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid groupId = null;
            //CreateChunkGroupData createChunkGroupData = null;
            //instance.RemoveChunkFromGroup(tRDataset, groupId, createChunkGroupData);
        }

        /// <summary>
        /// Test SearchOverGroups
        /// </summary>
        [Fact]
        public void SearchOverGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SearchOverGroupsData searchOverGroupsData = null;
            //var response = instance.SearchOverGroups(searchOverGroupsData);
            //Assert.IsType<SearchOverGroupsResponseBody>(response);
        }

        /// <summary>
        /// Test SearchWithinGroup
        /// </summary>
        [Fact]
        public void SearchWithinGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //SearchWithinGroupData searchWithinGroupData = null;
            //var response = instance.SearchWithinGroup(tRDataset, searchWithinGroupData);
            //Assert.IsType<SearchGroupsResult>(response);
        }

        /// <summary>
        /// Test UpdateChunkGroup
        /// </summary>
        [Fact]
        public void UpdateChunkGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //UpdateChunkGroupData updateChunkGroupData = null;
            //instance.UpdateChunkGroup(tRDataset, updateChunkGroupData);
        }

        /// <summary>
        /// Test UpdateGroupByTrackingId
        /// </summary>
        [Fact]
        public void UpdateGroupByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid trackingId = null;
            //UpdateGroupByTrackingIDData updateGroupByTrackingIDData = null;
            //instance.UpdateGroupByTrackingId(tRDataset, trackingId, updateGroupByTrackingIDData);
        }
    }
}
