/*
 * Trieve API
 *
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: developers@trieve.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using trieve_dotnet_client.Client;
using trieve_dotnet_client.Api;
// uncomment below to import models
//using trieve_dotnet_client.Model;

namespace trieve_dotnet_client.Test.Api
{
    /// <summary>
    ///  Class for testing ChunkApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChunkApiTests : IDisposable
    {
        private ChunkApi instance;

        public ChunkApiTests()
        {
            instance = new ChunkApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChunkApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ChunkApi
            //Assert.IsType<ChunkApi>(instance);
        }

        /// <summary>
        /// Test CreateChunk
        /// </summary>
        [Fact]
        public void CreateChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //CreateChunkData createChunkData = null;
            //var response = instance.CreateChunk(tRDataset, createChunkData);
            //Assert.IsType<ReturnQueuedChunk>(response);
        }

        /// <summary>
        /// Test CreateSuggestedQueriesHandler
        /// </summary>
        [Fact]
        public void CreateSuggestedQueriesHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //SuggestedQueriesRequest suggestedQueriesRequest = null;
            //var response = instance.CreateSuggestedQueriesHandler(tRDataset, suggestedQueriesRequest);
            //Assert.IsType<SuggestedQueriesResponse>(response);
        }

        /// <summary>
        /// Test DeleteChunk
        /// </summary>
        [Fact]
        public void DeleteChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid chunkId = null;
            //instance.DeleteChunk(tRDataset, chunkId);
        }

        /// <summary>
        /// Test DeleteChunkByTrackingId
        /// </summary>
        [Fact]
        public void DeleteChunkByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string trackingId = null;
            //instance.DeleteChunkByTrackingId(tRDataset, trackingId);
        }

        /// <summary>
        /// Test GenerateOffChunks
        /// </summary>
        [Fact]
        public void GenerateOffChunksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //GenerateChunksRequest generateChunksRequest = null;
            //var response = instance.GenerateOffChunks(tRDataset, generateChunksRequest);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetChunkById
        /// </summary>
        [Fact]
        public void GetChunkByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //Guid chunkId = null;
            //var response = instance.GetChunkById(tRDataset, chunkId);
            //Assert.IsType<ChunkMetadata>(response);
        }

        /// <summary>
        /// Test GetChunkByTrackingId
        /// </summary>
        [Fact]
        public void GetChunkByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //string trackingId = null;
            //var response = instance.GetChunkByTrackingId(tRDataset, trackingId);
            //Assert.IsType<ChunkMetadata>(response);
        }

        /// <summary>
        /// Test GetRecommendedChunks
        /// </summary>
        [Fact]
        public void GetRecommendedChunksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //RecommendChunksRequest recommendChunksRequest = null;
            //var response = instance.GetRecommendedChunks(tRDataset, recommendChunksRequest);
            //Assert.IsType<List<ChunkMetadataWithFileData>>(response);
        }

        /// <summary>
        /// Test SearchChunk
        /// </summary>
        [Fact]
        public void SearchChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //SearchChunkData searchChunkData = null;
            //var response = instance.SearchChunk(tRDataset, searchChunkData);
            //Assert.IsType<SearchChunkQueryResponseBody>(response);
        }

        /// <summary>
        /// Test UpdateChunk
        /// </summary>
        [Fact]
        public void UpdateChunkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //UpdateChunkData updateChunkData = null;
            //instance.UpdateChunk(tRDataset, updateChunkData);
        }

        /// <summary>
        /// Test UpdateChunkByTrackingId
        /// </summary>
        [Fact]
        public void UpdateChunkByTrackingIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tRDataset = null;
            //UpdateChunkByTrackingIdData updateChunkByTrackingIdData = null;
            //instance.UpdateChunkByTrackingId(tRDataset, updateChunkByTrackingIdData);
        }
    }
}
